
SPI_loopback.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  00000148  000001bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000861  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073e  00000000  00000000  00000b05  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000361  00000000  00000000  00001243  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  000015a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f9  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e7  00000000  00000000  00001a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001b04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e4       	ldi	r30, 0x48	; 72
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 32       	cpi	r26, 0x2E	; 46
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 79 00 	call	0xf2	; 0xf2 <main>
  8e:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <usart_init>:
    USART_putstring("\n");
  }
}

void usart_init(void) {
  UCSR0B = (1 << TXEN0);
  96:	88 e0       	ldi	r24, 0x08	; 8
  98:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
  9c:	86 e0       	ldi	r24, 0x06	; 6
  9e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  UBRR0L = F_CPU / 16 / BAUD_RATE - 1;
  a2:	87 e6       	ldi	r24, 0x67	; 103
  a4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  a8:	08 95       	ret

000000aa <usart_send>:
}

void usart_send(unsigned char ch) {
  while (!(UCSR0A & (1 << UDRE0)))
  aa:	e0 ec       	ldi	r30, 0xC0	; 192
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	90 81       	ld	r25, Z
  b0:	95 ff       	sbrs	r25, 5
  b2:	fd cf       	rjmp	.-6      	; 0xae <usart_send+0x4>
    ;        // wait until UDR0 is empty
  UDR0 = ch; // transmit ch
  b4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  b8:	08 95       	ret

000000ba <USART_putstring>:
}

void USART_putstring(char *StringPtr) {
  ba:	cf 93       	push	r28
  bc:	df 93       	push	r29
  be:	ec 01       	movw	r28, r24

  while (*StringPtr != 0x00) {
  c0:	88 81       	ld	r24, Y
  c2:	88 23       	and	r24, r24
  c4:	31 f0       	breq	.+12     	; 0xd2 <USART_putstring+0x18>
  c6:	21 96       	adiw	r28, 0x01	; 1
    usart_send(*StringPtr);
  c8:	0e 94 55 00 	call	0xaa	; 0xaa <usart_send>
  UDR0 = ch; // transmit ch
}

void USART_putstring(char *StringPtr) {

  while (*StringPtr != 0x00) {
  cc:	89 91       	ld	r24, Y+
  ce:	81 11       	cpse	r24, r1
  d0:	fb cf       	rjmp	.-10     	; 0xc8 <USART_putstring+0xe>
    usart_send(*StringPtr);
    StringPtr++;
  }
}
  d2:	df 91       	pop	r29
  d4:	cf 91       	pop	r28
  d6:	08 95       	ret

000000d8 <SPI_transmit>:

unsigned char SPI_transmit(unsigned char data) {
  // Start transmission
  SPDR = data;
  d8:	8e bd       	out	0x2e, r24	; 46
  // Wait for transmission complete
  while (!(SPSR & (1 << SPIF)))
  da:	0d b4       	in	r0, 0x2d	; 45
  dc:	07 fe       	sbrs	r0, 7
  de:	fd cf       	rjmp	.-6      	; 0xda <SPI_transmit+0x2>
    ;
  data = SPDR;
  e0:	8e b5       	in	r24, 0x2e	; 46
  return (data);
}
  e2:	08 95       	ret

000000e4 <SPI_receive>:
unsigned char SPI_receive(void) {
  unsigned char data;
  // Wait for reception complete
  SPDR = 0xff;
  e4:	8f ef       	ldi	r24, 0xFF	; 255
  e6:	8e bd       	out	0x2e, r24	; 46
  while (!(SPSR & (1 << SPIF)))
  e8:	0d b4       	in	r0, 0x2d	; 45
  ea:	07 fe       	sbrs	r0, 7
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <SPI_receive+0x4>
    ;
  data = SPDR;
  ee:	8e b5       	in	r24, 0x2e	; 46
  return data;
}
  f0:	08 95       	ret

000000f2 <main>:
void USART_putstring(char *StringPtr);

unsigned char data = 'a'; //0X41;

int main() {
  DDRB |= (1 << 2) | (1 << 3) | (1 << 5); // SCK, MOSI and SS as outputs
  f2:	84 b1       	in	r24, 0x04	; 4
  f4:	8c 62       	ori	r24, 0x2C	; 44
  f6:	84 b9       	out	0x04, r24	; 4
  PORTB &= (0<<2);
  f8:	85 b1       	in	r24, 0x05	; 5
  fa:	15 b8       	out	0x05, r1	; 5

  // USART0 initialization
  usart_init();
  fc:	0e 94 4b 00 	call	0x96	; 0x96 <usart_init>

  // initialize SPI with lowest frequency possible for debug purposes
  //	SPCR = 0b01110011;
  SPCR = (0 << SPIE) | // SPI Interrupt Enable
 100:	83 e5       	ldi	r24, 0x53	; 83
 102:	8c bd       	out	0x2c, r24	; 44
         (1 << MSTR) | // Master mode
         (0 << CPOL) | // Clock Polarity:
         (0 << CPHA) | // Clock Phase:
         (1 << SPR1) | // Clock Frequency: f_OSC / 4
         (1 << SPR0);
  SPSR |= (0 << SPI2X); // Doubled Clock Frequency: f_OSC / 2
 104:	8d b5       	in	r24, 0x2d	; 45
 106:	8d bd       	out	0x2d, r24	; 45
  for (;;) {
    SPI_transmit(data);
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 10c:	0e 94 6c 00 	call	0xd8	; 0xd8 <SPI_transmit>
    USART_putstring("TX Complete  ...   ");
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	91 e0       	ldi	r25, 0x01	; 1
 114:	0e 94 5d 00 	call	0xba	; 0xba <USART_putstring>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	2f ef       	ldi	r18, 0xFF	; 255
 11a:	83 ec       	ldi	r24, 0xC3	; 195
 11c:	99 e0       	ldi	r25, 0x09	; 9
 11e:	21 50       	subi	r18, 0x01	; 1
 120:	80 40       	sbci	r24, 0x00	; 0
 122:	90 40       	sbci	r25, 0x00	; 0
 124:	e1 f7       	brne	.-8      	; 0x11e <main+0x2c>
 126:	00 c0       	rjmp	.+0      	; 0x128 <main+0x36>
 128:	00 00       	nop
    _delay_ms(200);
    usart_send(SPI_receive());
 12a:	0e 94 72 00 	call	0xe4	; 0xe4 <SPI_receive>
 12e:	0e 94 55 00 	call	0xaa	; 0xaa <usart_send>
    USART_putstring("    ..... RX Complete");
 132:	85 e1       	ldi	r24, 0x15	; 21
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	0e 94 5d 00 	call	0xba	; 0xba <USART_putstring>
    USART_putstring("\n");
 13a:	8b e2       	ldi	r24, 0x2B	; 43
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 5d 00 	call	0xba	; 0xba <USART_putstring>
 142:	e2 cf       	rjmp	.-60     	; 0x108 <main+0x16>

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
