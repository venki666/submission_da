
avr-lis3dh.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000612  000006c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000612  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000083  0080010c  0080010c  000006d2  2**0
                  ALLOC
  3 .eeprom       00000001  00810000  00810000  000006d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  000006d3  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000704  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000000c0  00000000  00000000  00000748  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001029  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000008b0  00000000  00000000  00001831  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000926  00000000  00000000  000020e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000154  00000000  00000000  00002a08  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000004ce  00000000  00000000  00002b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008bf  00000000  00000000  0000302a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000100  00000000  00000000  000038e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e1       	ldi	r30, 0x12	; 18
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e0       	ldi	r26, 0x0C	; 12
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 38       	cpi	r26, 0x8F	; 143
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
  9e:	0c 94 07 03 	jmp	0x60e	; 0x60e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <send_byte>:
void clear_rx_buf(void) {
	rx_buf_pos = rx_buf_posr = 0;
}

static void send_byte(uint8_t d) {
	while (bit_is_clear(UCSR0A, UDRE0)); // wait to become writable.
  a6:	e0 ec       	ldi	r30, 0xC0	; 192
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	90 81       	ld	r25, Z
  ac:	95 ff       	sbrs	r25, 5
  ae:	fd cf       	rjmp	.-6      	; 0xaa <send_byte+0x4>
	UDR0 = d;
  b0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  b4:	08 95       	ret

000000b6 <SPI_init_master>:

///////////////////////////////////////////////////////////////////////////////////////////////////////
// SPI util

void SPI_init_master() {
	PORTB |= (1<<SENSOR1_CS) | (1<<SENSOR2_CS); // disable chips
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	86 60       	ori	r24, 0x06	; 6
  ba:	85 b9       	out	0x05, r24	; 5
	DDRB |= (1<<PB5) | (1<<PB3) | (1<<SENSOR1_CS) | (1<<SENSOR2_CS); // SCK, MOSI, SS
  bc:	84 b1       	in	r24, 0x04	; 4
  be:	8e 62       	ori	r24, 0x2E	; 46
  c0:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~((1<<PB4));  // MISO
  c2:	24 98       	cbi	0x04, 4	; 4
	SPCR = (1<<SPE)|(1<<MSTR) | (1<<SPR1);
  c4:	82 e5       	ldi	r24, 0x52	; 82
  c6:	8c bd       	out	0x2c, r24	; 44
  c8:	08 95       	ret

000000ca <lis3dh_read8>:
}

uint8_t lis3dh_read8(uint8_t addr, uint8_t cs) {
	PORTB &= ~(1<<cs);
  ca:	95 b1       	in	r25, 0x05	; 5
  cc:	21 e0       	ldi	r18, 0x01	; 1
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	02 c0       	rjmp	.+4      	; 0xd6 <lis3dh_read8+0xc>
  d2:	22 0f       	add	r18, r18
  d4:	33 1f       	adc	r19, r19
  d6:	6a 95       	dec	r22
  d8:	e2 f7       	brpl	.-8      	; 0xd2 <lis3dh_read8+0x8>
  da:	42 2f       	mov	r20, r18
  dc:	40 95       	com	r20
  de:	94 23       	and	r25, r20
  e0:	95 b9       	out	0x05, r25	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	95 e3       	ldi	r25, 0x35	; 53
  e4:	9a 95       	dec	r25
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lis3dh_read8+0x1a>
  e8:	00 00       	nop
	_delay_us(10);
	SPDR = addr | 0x80;
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1 << SPIF)));
  ee:	0d b4       	in	r0, 0x2d	; 45
  f0:	07 fe       	sbrs	r0, 7
  f2:	fd cf       	rjmp	.-6      	; 0xee <lis3dh_read8+0x24>
	SPDR = 0;
  f4:	1e bc       	out	0x2e, r1	; 46
	while(!(SPSR & (1 << SPIF)));
  f6:	0d b4       	in	r0, 0x2d	; 45
  f8:	07 fe       	sbrs	r0, 7
  fa:	fd cf       	rjmp	.-6      	; 0xf6 <lis3dh_read8+0x2c>
	PORTB |= (1<<cs);
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	28 2b       	or	r18, r24
 100:	25 b9       	out	0x05, r18	; 5
	return SPDR;
 102:	8e b5       	in	r24, 0x2e	; 46
}
 104:	08 95       	ret

00000106 <lis3dh_read>:

void lis3dh_read(uint8_t *buf, uint8_t addr, uint8_t sz, uint8_t cs) {
 106:	fc 01       	movw	r30, r24
	PORTB &= ~(1<<cs);
 108:	55 b1       	in	r21, 0x05	; 5
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	dc 01       	movw	r26, r24
 110:	02 c0       	rjmp	.+4      	; 0x116 <lis3dh_read+0x10>
 112:	aa 0f       	add	r26, r26
 114:	bb 1f       	adc	r27, r27
 116:	2a 95       	dec	r18
 118:	e2 f7       	brpl	.-8      	; 0x112 <lis3dh_read+0xc>
 11a:	9d 01       	movw	r18, r26
 11c:	8a 2f       	mov	r24, r26
 11e:	80 95       	com	r24
 120:	85 23       	and	r24, r21
 122:	85 b9       	out	0x05, r24	; 5
 124:	b5 e3       	ldi	r27, 0x35	; 53
 126:	ba 95       	dec	r27
 128:	f1 f7       	brne	.-4      	; 0x126 <lis3dh_read+0x20>
 12a:	00 00       	nop
	_delay_us(10);

	SPDR = addr | 0xC0;
 12c:	60 6c       	ori	r22, 0xC0	; 192
 12e:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1 << SPIF)));
 130:	0d b4       	in	r0, 0x2d	; 45
 132:	07 fe       	sbrs	r0, 7
 134:	fd cf       	rjmp	.-6      	; 0x130 <lis3dh_read+0x2a>
	while(sz) {
 136:	44 23       	and	r20, r20
 138:	41 f0       	breq	.+16     	; 0x14a <lis3dh_read+0x44>
		SPDR = 0;
 13a:	1e bc       	out	0x2e, r1	; 46
		while(!(SPSR & (1 << SPIF)));
 13c:	0d b4       	in	r0, 0x2d	; 45
 13e:	07 fe       	sbrs	r0, 7
 140:	fd cf       	rjmp	.-6      	; 0x13c <lis3dh_read+0x36>
		*buf = SPDR;
 142:	8e b5       	in	r24, 0x2e	; 46
 144:	81 93       	st	Z+, r24
		sz--;
 146:	41 50       	subi	r20, 0x01	; 1
	PORTB &= ~(1<<cs);
	_delay_us(10);

	SPDR = addr | 0xC0;
	while(!(SPSR & (1 << SPIF)));
	while(sz) {
 148:	c1 f7       	brne	.-16     	; 0x13a <lis3dh_read+0x34>
		*buf = SPDR;
		sz--;
		buf++;
	}

	PORTB |= (1<<cs);
 14a:	85 b1       	in	r24, 0x05	; 5
 14c:	28 2b       	or	r18, r24
 14e:	25 b9       	out	0x05, r18	; 5
 150:	08 95       	ret

00000152 <lis3dh_write>:
}


void lis3dh_write(uint8_t *buf, uint8_t addr, uint8_t sz, uint8_t cs) {
 152:	fc 01       	movw	r30, r24
	PORTB &= ~(1<<cs);
 154:	55 b1       	in	r21, 0x05	; 5
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	dc 01       	movw	r26, r24
 15c:	02 c0       	rjmp	.+4      	; 0x162 <lis3dh_write+0x10>
 15e:	aa 0f       	add	r26, r26
 160:	bb 1f       	adc	r27, r27
 162:	2a 95       	dec	r18
 164:	e2 f7       	brpl	.-8      	; 0x15e <lis3dh_write+0xc>
 166:	9d 01       	movw	r18, r26
 168:	8a 2f       	mov	r24, r26
 16a:	80 95       	com	r24
 16c:	85 23       	and	r24, r21
 16e:	85 b9       	out	0x05, r24	; 5
 170:	b5 e3       	ldi	r27, 0x35	; 53
 172:	ba 95       	dec	r27
 174:	f1 f7       	brne	.-4      	; 0x172 <lis3dh_write+0x20>
 176:	00 00       	nop
	_delay_us(10);

	SPDR = addr | 0x40;
 178:	60 64       	ori	r22, 0x40	; 64
 17a:	6e bd       	out	0x2e, r22	; 46
	while(!(SPSR & (1 << SPIF)));
 17c:	0d b4       	in	r0, 0x2d	; 45
 17e:	07 fe       	sbrs	r0, 7
 180:	fd cf       	rjmp	.-6      	; 0x17c <lis3dh_write+0x2a>
	while(sz) {
 182:	44 23       	and	r20, r20
 184:	49 f0       	breq	.+18     	; 0x198 <lis3dh_write+0x46>
		SPDR = *buf;
 186:	80 81       	ld	r24, Z
 188:	8e bd       	out	0x2e, r24	; 46
		while(!(SPSR & (1 << SPIF)));
 18a:	0d b4       	in	r0, 0x2d	; 45
 18c:	07 fe       	sbrs	r0, 7
 18e:	fd cf       	rjmp	.-6      	; 0x18a <lis3dh_write+0x38>
		*buf = SPDR;
 190:	8e b5       	in	r24, 0x2e	; 46
 192:	81 93       	st	Z+, r24
		sz--;
 194:	41 50       	subi	r20, 0x01	; 1
	PORTB &= ~(1<<cs);
	_delay_us(10);

	SPDR = addr | 0x40;
	while(!(SPSR & (1 << SPIF)));
	while(sz) {
 196:	b9 f7       	brne	.-18     	; 0x186 <lis3dh_write+0x34>
		*buf = SPDR;
		sz--;
		buf++;
	}

	PORTB |= (1<<cs);
 198:	85 b1       	in	r24, 0x05	; 5
 19a:	28 2b       	or	r18, r24
 19c:	25 b9       	out	0x05, r18	; 5
 19e:	08 95       	ret

000001a0 <__vector_18>:
#define RX_BUF_SIZE 128
volatile uint8_t rx_buf[RX_BUF_SIZE];
volatile uint8_t rx_buf_pos = 0;
volatile uint8_t rx_buf_posr = 0;

ISR(USART_RX_vect) {
 1a0:	1f 92       	push	r1
 1a2:	0f 92       	push	r0
 1a4:	0f b6       	in	r0, 0x3f	; 63
 1a6:	0f 92       	push	r0
 1a8:	11 24       	eor	r1, r1
 1aa:	8f 93       	push	r24
 1ac:	ef 93       	push	r30
 1ae:	ff 93       	push	r31
	if(bit_is_clear(UCSR0A,FE0)){// if no error.
 1b0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 1b4:	84 fd       	sbrc	r24, 4
 1b6:	0e c0       	rjmp	.+28     	; 0x1d4 <__vector_18+0x34>
		rx_buf[rx_buf_pos] = UDR0;
 1b8:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <rx_buf_pos>
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 1c2:	e1 5f       	subi	r30, 0xF1	; 241
 1c4:	fe 4f       	sbci	r31, 0xFE	; 254
 1c6:	80 83       	st	Z, r24
		rx_buf_pos = (rx_buf_pos+1) & (RX_BUF_SIZE-1);
 1c8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <rx_buf_pos>
 1cc:	8f 5f       	subi	r24, 0xFF	; 255
 1ce:	8f 77       	andi	r24, 0x7F	; 127
 1d0:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <rx_buf_pos>
	}
}
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	8f 91       	pop	r24
 1da:	0f 90       	pop	r0
 1dc:	0f be       	out	0x3f, r0	; 63
 1de:	0f 90       	pop	r0
 1e0:	1f 90       	pop	r1
 1e2:	18 95       	reti

000001e4 <recv_byte>:

uint8_t recv_byte(void) {
	// while (bit_is_clear(UCSR0A, RXC0)); // Wait for data to be received.
	// return UDR0;
	while (rx_buf_posr == rx_buf_pos);
 1e4:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
 1e8:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <rx_buf_pos>
 1ec:	98 17       	cp	r25, r24
 1ee:	d1 f3       	breq	.-12     	; 0x1e4 <recv_byte>
	uint8_t d = rx_buf[rx_buf_posr];
 1f0:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <__data_end>
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	e1 5f       	subi	r30, 0xF1	; 241
 1f8:	fe 4f       	sbci	r31, 0xFE	; 254
 1fa:	80 81       	ld	r24, Z
	rx_buf_posr = (rx_buf_posr+1) & (RX_BUF_SIZE-1);
 1fc:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <__data_end>
 200:	9f 5f       	subi	r25, 0xFF	; 255
 202:	9f 77       	andi	r25, 0x7F	; 127
 204:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <__data_end>
	return d;
}
 208:	08 95       	ret

0000020a <clear_rx_buf>:

static inline uint8_t recv_ready(void) {
	return rx_buf_pos - rx_buf_posr;
}
void clear_rx_buf(void) {
	rx_buf_pos = rx_buf_posr = 0;
 20a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <__data_end>
 20e:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <rx_buf_pos>
 212:	08 95       	ret

00000214 <writeBytes>:
static void send_byte(uint8_t d) {
	while (bit_is_clear(UCSR0A, UDRE0)); // wait to become writable.
	UDR0 = d;
}

void writeBytes(uint8_t buf[], uint8_t len) {
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	ec 01       	movw	r28, r24
	for (; len; len--, buf++) send_byte(*buf);
 21e:	66 23       	and	r22, r22
 220:	69 f0       	breq	.+26     	; 0x23c <writeBytes+0x28>
 222:	61 50       	subi	r22, 0x01	; 1
 224:	06 2f       	mov	r16, r22
 226:	10 e0       	ldi	r17, 0x00	; 0
 228:	0f 5f       	subi	r16, 0xFF	; 255
 22a:	1f 4f       	sbci	r17, 0xFF	; 255
 22c:	08 0f       	add	r16, r24
 22e:	19 1f       	adc	r17, r25
 230:	89 91       	ld	r24, Y+
 232:	0e 94 53 00 	call	0xa6	; 0xa6 <send_byte>
 236:	c0 17       	cp	r28, r16
 238:	d1 07       	cpc	r29, r17
 23a:	d1 f7       	brne	.-12     	; 0x230 <writeBytes+0x1c>
}
 23c:	df 91       	pop	r29
 23e:	cf 91       	pop	r28
 240:	1f 91       	pop	r17
 242:	0f 91       	pop	r16
 244:	08 95       	ret

00000246 <uart_puts>:

void uart_puts(char buf[]) {
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	ec 01       	movw	r28, r24
	for (; *buf; buf++) send_byte(*buf);
 24c:	88 81       	ld	r24, Y
 24e:	88 23       	and	r24, r24
 250:	31 f0       	breq	.+12     	; 0x25e <uart_puts+0x18>
 252:	21 96       	adiw	r28, 0x01	; 1
 254:	0e 94 53 00 	call	0xa6	; 0xa6 <send_byte>
 258:	89 91       	ld	r24, Y+
 25a:	81 11       	cpse	r24, r1
 25c:	fb cf       	rjmp	.-10     	; 0x254 <uart_puts+0xe>
}
 25e:	df 91       	pop	r29
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <readBytes>:

uint8_t readBytes(uint8_t buf[], uint8_t len, uint16_t timeout_ms) {
 264:	df 92       	push	r13
 266:	ef 92       	push	r14
 268:	ff 92       	push	r15
 26a:	0f 93       	push	r16
 26c:	1f 93       	push	r17
 26e:	cf 93       	push	r28
 270:	df 93       	push	r29
 272:	d6 2e       	mov	r13, r22
 274:	8a 01       	movw	r16, r20
	uint8_t i;
	uint8_t subms = 0;
	for (i = 0; i < len; i++) {
 276:	66 23       	and	r22, r22
 278:	09 f1       	breq	.+66     	; 0x2bc <readBytes+0x58>
 27a:	e8 2e       	mov	r14, r24
 27c:	f9 2e       	mov	r15, r25
 27e:	d0 e0       	ldi	r29, 0x00	; 0
 280:	c0 e0       	ldi	r28, 0x00	; 0
 282:	0d c0       	rjmp	.+26     	; 0x29e <readBytes+0x3a>
 284:	85 e3       	ldi	r24, 0x35	; 53
 286:	8a 95       	dec	r24
 288:	f1 f7       	brne	.-4      	; 0x286 <readBytes+0x22>
 28a:	00 00       	nop
		while (recv_ready() == 0) {
			_delay_us(10);
			if (++subms >= 100) {
 28c:	cf 5f       	subi	r28, 0xFF	; 255
 28e:	c4 36       	cpi	r28, 0x64	; 100
 290:	30 f0       	brcs	.+12     	; 0x29e <readBytes+0x3a>
				if (timeout_ms == 0) {
 292:	01 15       	cp	r16, r1
 294:	11 05       	cpc	r17, r1
 296:	a9 f0       	breq	.+42     	; 0x2c2 <readBytes+0x5e>
					return i;
				}
				subms = 0;
				timeout_ms--;
 298:	01 50       	subi	r16, 0x01	; 1
 29a:	11 09       	sbc	r17, r1
			_delay_us(10);
			if (++subms >= 100) {
				if (timeout_ms == 0) {
					return i;
				}
				subms = 0;
 29c:	c0 e0       	ldi	r28, 0x00	; 0
	rx_buf_posr = (rx_buf_posr+1) & (RX_BUF_SIZE-1);
	return d;
}

static inline uint8_t recv_ready(void) {
	return rx_buf_pos - rx_buf_posr;
 29e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <rx_buf_pos>
 2a2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>

uint8_t readBytes(uint8_t buf[], uint8_t len, uint16_t timeout_ms) {
	uint8_t i;
	uint8_t subms = 0;
	for (i = 0; i < len; i++) {
		while (recv_ready() == 0) {
 2a6:	98 17       	cp	r25, r24
 2a8:	69 f3       	breq	.-38     	; 0x284 <readBytes+0x20>
				}
				subms = 0;
				timeout_ms--;
			}
		}
		buf[i] = recv_byte();
 2aa:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <recv_byte>
 2ae:	f7 01       	movw	r30, r14
 2b0:	81 93       	st	Z+, r24
 2b2:	7f 01       	movw	r14, r30
}

uint8_t readBytes(uint8_t buf[], uint8_t len, uint16_t timeout_ms) {
	uint8_t i;
	uint8_t subms = 0;
	for (i = 0; i < len; i++) {
 2b4:	df 5f       	subi	r29, 0xFF	; 255
 2b6:	dd 12       	cpse	r13, r29
 2b8:	f2 cf       	rjmp	.-28     	; 0x29e <readBytes+0x3a>
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <readBytes+0x5c>
 2bc:	d6 2f       	mov	r29, r22
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <readBytes+0x5e>
 2c0:	dd 2d       	mov	r29, r13
			}
		}
		buf[i] = recv_byte();
	}
	return i;
}
 2c2:	8d 2f       	mov	r24, r29
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	ff 90       	pop	r15
 2ce:	ef 90       	pop	r14
 2d0:	df 90       	pop	r13
 2d2:	08 95       	ret

000002d4 <init_uart>:

void init_uart() {
	UBRR0 = 0; // stop UART
 2d4:	e4 ec       	ldi	r30, 0xC4	; 196
 2d6:	f0 e0       	ldi	r31, 0x00	; 0
 2d8:	11 82       	std	Z+1, r1	; 0x01
 2da:	10 82       	st	Z, r1
	UCSR0A |= _BV(U2X0); // 2x
 2dc:	a0 ec       	ldi	r26, 0xC0	; 192
 2de:	b0 e0       	ldi	r27, 0x00	; 0
 2e0:	8c 91       	ld	r24, X
 2e2:	82 60       	ori	r24, 0x02	; 2
 2e4:	8c 93       	st	X, r24
	UCSR0B = _BV(TXEN0) | _BV(RXEN0) | _BV(RXCIE0); // enable Tx Rx Rx_INT
 2e6:	88 e9       	ldi	r24, 0x98	; 152
 2e8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C = (1 << UCSZ00) |  (1 << UCSZ01); // 8bit
 2ec:	86 e0       	ldi	r24, 0x06	; 6
 2ee:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UBRR0 = F_CPU/8/UART_BAUD-1; // Baud rate
 2f2:	8f ec       	ldi	r24, 0xCF	; 207
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	91 83       	std	Z+1, r25	; 0x01
 2f8:	80 83       	st	Z, r24
 2fa:	08 95       	ret

000002fc <main>:
uint8_t device_id;

static uint8_t EEMEM eemem_devid = 0;
//static uint8_t PROGMEM pgm_version[] = {'A',1,10,10, 0,0,  'Z', 'Z', 0,0,0,1, 0,0,0,0 };

int main(void) {
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	cd b7       	in	r28, 0x3d	; 61
 302:	de b7       	in	r29, 0x3e	; 62
 304:	a8 97       	sbiw	r28, 0x28	; 40
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	f8 94       	cli
 30a:	de bf       	out	0x3e, r29	; 62
 30c:	0f be       	out	0x3f, r0	; 63
 30e:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0x00;
 310:	17 b8       	out	0x07, r1	; 7
	PORTC = 0x20; // pull up PC5
 312:	80 e2       	ldi	r24, 0x20	; 32
 314:	88 b9       	out	0x08, r24	; 8
	DDRD = 0xe0; // LEDs
 316:	80 ee       	ldi	r24, 0xE0	; 224
 318:	8a b9       	out	0x0a, r24	; 10
	PORTD = 0x01;
 31a:	81 e0       	ldi	r24, 0x01	; 1
 31c:	8b b9       	out	0x0b, r24	; 11

	init_uart();
 31e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <init_uart>
	SPI_init_master();
 322:	0e 94 5b 00 	call	0xb6	; 0xb6 <SPI_init_master>

	eeprom_busy_wait();
 326:	f9 99       	sbic	0x1f, 1	; 31
 328:	fe cf       	rjmp	.-4      	; 0x326 <main+0x2a>
	device_id = eeprom_read_byte(&eemem_devid);
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	0e 94 ed 02 	call	0x5da	; 0x5da <eeprom_read_byte>
 332:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <device_id>
	if (device_id == 0xff) device_id = 0;
 336:	8f 3f       	cpi	r24, 0xFF	; 255
 338:	11 f4       	brne	.+4      	; 0x33e <main+0x42>
 33a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <device_id>

	sei();
 33e:	78 94       	sei

	for (uint8_t count = 0;;count ++) {
 340:	10 e0       	ldi	r17, 0x00	; 0
						buf[4] = 5 + (0x80 | CMD_LOAD) + device_id; // sum
						writeBytes(buf, buf[0]);
						} else if (buf[0] == CMD_SAVE) {
						eeprom_busy_wait();
						eeprom_update_byte(&eemem_devid, device_id);
						buf[0] = 5;
 342:	0f 2e       	mov	r0, r31
 344:	f5 e0       	ldi	r31, 0x05	; 5
 346:	9f 2e       	mov	r9, r31
 348:	f0 2d       	mov	r31, r0
						buf[1] = 0x80 | CMD_SAVE;
 34a:	0f 2e       	mov	r0, r31
 34c:	f2 e8       	ldi	r31, 0x82	; 130
 34e:	cf 2e       	mov	r12, r31
 350:	f0 2d       	mov	r31, r0
							buf[4] = 5 + (0x80 | CMD_WRITE) + device_id; // sum
							writeBytes(buf, buf[0]);
						}
						} else if (buf[0] == CMD_LOAD) {
						buf[0] = 5;
						buf[1] = 0x80 | CMD_LOAD;
 352:	0f 2e       	mov	r0, r31
 354:	f1 e8       	ldi	r31, 0x81	; 129
 356:	bf 2e       	mov	r11, r31
 358:	f0 2d       	mov	r31, r0
								lis3dh_write(&buf[3], addr - SENSOR1_OFFSET, len - 6, SENSOR1_CS);
								} else if (addr >= SENSOR2_OFFSET && addr < SENSOR2_OFFSET + SENSOR2_SIZE) {
								lis3dh_write(&buf[3], addr - SENSOR2_OFFSET, len - 6, SENSOR2_CS);
							}
							buf[0] = 5;
							buf[1] = 0x80 | CMD_WRITE;
 35a:	0f 2e       	mov	r0, r31
 35c:	f4 e8       	ldi	r31, 0x84	; 132
 35e:	af 2e       	mov	r10, r31
 360:	f0 2d       	mov	r31, r0
						}
						buf[0] = len + 5;
						buf[1] = 0x80 | CMD_READ;
						buf[2] = 0x00;
						buf[3] = device_id;
						buf[len + 4] = 0;
 362:	d1 2c       	mov	r13, r1
 364:	e1 2c       	mov	r14, r1
							for (uint8_t i = 0; i < len; i++) {
								//buf[4+i] = pgm_read_byte(&pgm_version[i]);
							}
						}
						buf[0] = len + 5;
						buf[1] = 0x80 | CMD_READ;
 366:	0f 2e       	mov	r0, r31
 368:	f3 e8       	ldi	r31, 0x83	; 131
 36a:	ff 2e       	mov	r15, r31
 36c:	f0 2d       	mov	r31, r0
						buf[2] = 0x00;
						buf[3] = device_id;
						buf[len + 4] = 0;
 36e:	68 94       	set
 370:	66 24       	eor	r6, r6
 372:	62 f8       	bld	r6, 2
 374:	71 2c       	mov	r7, r1
	rx_buf_posr = (rx_buf_posr+1) & (RX_BUF_SIZE-1);
	return d;
}

static inline uint8_t recv_ready(void) {
	return rx_buf_pos - rx_buf_posr;
 376:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <rx_buf_pos>
 37a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <__data_end>
	if (device_id == 0xff) device_id = 0;

	sei();

	for (uint8_t count = 0;;count ++) {
		if (recv_ready()) {
 37e:	98 13       	cpse	r25, r24
 380:	07 c0       	rjmp	.+14     	; 0x390 <main+0x94>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 382:	8f e9       	ldi	r24, 0x9F	; 159
 384:	9f e0       	ldi	r25, 0x0F	; 15
 386:	01 97       	sbiw	r24, 0x01	; 1
 388:	f1 f7       	brne	.-4      	; 0x386 <main+0x8a>
 38a:	00 c0       	rjmp	.+0      	; 0x38c <main+0x90>
 38c:	00 00       	nop
 38e:	fe c0       	rjmp	.+508    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
			uint8_t len = recv_byte();
 390:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <recv_byte>
 394:	08 2f       	mov	r16, r24
			if (len < 40) {
 396:	88 32       	cpi	r24, 0x28	; 40
 398:	08 f0       	brcs	.+2      	; 0x39c <main+0xa0>
 39a:	d3 c0       	rjmp	.+422    	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
				uint8_t buf[40];
				len--;
 39c:	88 24       	eor	r8, r8
 39e:	8a 94       	dec	r8
 3a0:	88 0e       	add	r8, r24
				readBytes(buf, len, UART_TIMEOUT);
 3a2:	44 e6       	ldi	r20, 0x64	; 100
 3a4:	50 e0       	ldi	r21, 0x00	; 0
 3a6:	68 2d       	mov	r22, r8
 3a8:	ce 01       	movw	r24, r28
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	0e 94 32 01 	call	0x264	; 0x264 <readBytes>
				if (buf[2] == device_id) {
 3b0:	6b 81       	ldd	r22, Y+3	; 0x03
 3b2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <device_id>
 3b6:	68 13       	cpse	r22, r24
 3b8:	e9 c0       	rjmp	.+466    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
					// [cmd, opt, id, addr, len]
					if (buf[0] == CMD_READ) {
 3ba:	89 81       	ldd	r24, Y+1	; 0x01
 3bc:	83 30       	cpi	r24, 0x03	; 3
 3be:	09 f0       	breq	.+2      	; 0x3c2 <main+0xc6>
 3c0:	5c c0       	rjmp	.+184    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
						uint8_t addr = buf[3];
 3c2:	8c 81       	ldd	r24, Y+4	; 0x04
						len = buf[4];
 3c4:	0d 81       	ldd	r16, Y+5	; 0x05
						if (addr == 0) {
 3c6:	81 11       	cpse	r24, r1
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <main+0xd2>
							buf[4] = device_id;
 3ca:	6d 83       	std	Y+5, r22	; 0x05
 3cc:	21 c0       	rjmp	.+66     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
							} else if (addr >= SENSOR1_OFFSET && addr < SENSOR1_OFFSET + SENSOR1_SIZE) {
 3ce:	90 ef       	ldi	r25, 0xF0	; 240
 3d0:	98 0f       	add	r25, r24
 3d2:	90 34       	cpi	r25, 0x40	; 64
 3d4:	40 f4       	brcc	.+16     	; 0x3e6 <main+0xea>
							lis3dh_read(&buf[4], addr - SENSOR1_OFFSET, len, SENSOR1_CS);
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	40 2f       	mov	r20, r16
 3da:	69 2f       	mov	r22, r25
 3dc:	ce 01       	movw	r24, r28
 3de:	05 96       	adiw	r24, 0x05	; 5
 3e0:	0e 94 83 00 	call	0x106	; 0x106 <lis3dh_read>
 3e4:	15 c0       	rjmp	.+42     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
							} else if (addr >= SENSOR2_OFFSET && addr < SENSOR2_OFFSET + SENSOR2_SIZE) {
 3e6:	90 eb       	ldi	r25, 0xB0	; 176
 3e8:	98 0f       	add	r25, r24
 3ea:	90 34       	cpi	r25, 0x40	; 64
 3ec:	40 f4       	brcc	.+16     	; 0x3fe <main+0x102>
							lis3dh_read(&buf[4], addr - SENSOR2_OFFSET, len, SENSOR2_CS);
 3ee:	22 e0       	ldi	r18, 0x02	; 2
 3f0:	40 2f       	mov	r20, r16
 3f2:	69 2f       	mov	r22, r25
 3f4:	ce 01       	movw	r24, r28
 3f6:	05 96       	adiw	r24, 0x05	; 5
 3f8:	0e 94 83 00 	call	0x106	; 0x106 <lis3dh_read>
 3fc:	09 c0       	rjmp	.+18     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
							} else if (addr >= 0xA2) {
 3fe:	82 3a       	cpi	r24, 0xA2	; 162
 400:	38 f0       	brcs	.+14     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
							for (uint8_t i = 0; i < len; i++) {
 402:	00 23       	and	r16, r16
 404:	09 f4       	brne	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	e1 c0       	rjmp	.+450    	; 0x5ca <__LOCK_REGION_LENGTH__+0x1ca>
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	8f 5f       	subi	r24, 0xFF	; 255
 40c:	08 13       	cpse	r16, r24
 40e:	fd cf       	rjmp	.-6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
								//buf[4+i] = pgm_read_byte(&pgm_version[i]);
							}
						}
						buf[0] = len + 5;
 410:	85 e0       	ldi	r24, 0x05	; 5
 412:	80 0f       	add	r24, r16
 414:	89 83       	std	Y+1, r24	; 0x01
						buf[1] = 0x80 | CMD_READ;
 416:	fa 82       	std	Y+2, r15	; 0x02
						buf[2] = 0x00;
 418:	1b 82       	std	Y+3, r1	; 0x03
						buf[3] = device_id;
 41a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <device_id>
 41e:	8c 83       	std	Y+4, r24	; 0x04
						buf[len + 4] = 0;
 420:	20 2f       	mov	r18, r16
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	2c 5f       	subi	r18, 0xFC	; 252
 426:	3f 4f       	sbci	r19, 0xFF	; 255
 428:	e1 e0       	ldi	r30, 0x01	; 1
 42a:	f0 e0       	ldi	r31, 0x00	; 0
 42c:	ec 0f       	add	r30, r28
 42e:	fd 1f       	adc	r31, r29
 430:	e2 0f       	add	r30, r18
 432:	f3 1f       	adc	r31, r19
 434:	10 82       	st	Z, r1
						for (uint8_t i = 0; i< len + 4; i++) {
 436:	12 16       	cp	r1, r18
 438:	13 06       	cpc	r1, r19
 43a:	cc f4       	brge	.+50     	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
						}
						buf[0] = len + 5;
						buf[1] = 0x80 | CMD_READ;
						buf[2] = 0x00;
						buf[3] = device_id;
						buf[len + 4] = 0;
 43c:	8d 2d       	mov	r24, r13
 43e:	9e 2d       	mov	r25, r14
 440:	40 e0       	ldi	r20, 0x00	; 0
						for (uint8_t i = 0; i< len + 4; i++) {
							buf[len + 4] += buf[i];
 442:	e1 e0       	ldi	r30, 0x01	; 1
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	ec 0f       	add	r30, r28
 448:	fd 1f       	adc	r31, r29
 44a:	e2 0f       	add	r30, r18
 44c:	f3 1f       	adc	r31, r19
 44e:	a1 e0       	ldi	r26, 0x01	; 1
 450:	b0 e0       	ldi	r27, 0x00	; 0
 452:	ac 0f       	add	r26, r28
 454:	bd 1f       	adc	r27, r29
 456:	a8 0f       	add	r26, r24
 458:	b9 1f       	adc	r27, r25
 45a:	50 81       	ld	r21, Z
 45c:	8c 91       	ld	r24, X
 45e:	85 0f       	add	r24, r21
 460:	80 83       	st	Z, r24
						buf[0] = len + 5;
						buf[1] = 0x80 | CMD_READ;
						buf[2] = 0x00;
						buf[3] = device_id;
						buf[len + 4] = 0;
						for (uint8_t i = 0; i< len + 4; i++) {
 462:	4f 5f       	subi	r20, 0xFF	; 255
 464:	84 2f       	mov	r24, r20
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	82 17       	cp	r24, r18
 46a:	93 07       	cpc	r25, r19
 46c:	84 f3       	brlt	.-32     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
							buf[len + 4] += buf[i];
						}
						writeBytes(buf, buf[0]);
 46e:	69 81       	ldd	r22, Y+1	; 0x01
 470:	ce 01       	movw	r24, r28
 472:	01 96       	adiw	r24, 0x01	; 1
 474:	0e 94 0a 01 	call	0x214	; 0x214 <writeBytes>
 478:	89 c0       	rjmp	.+274    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
						} else if (buf[0] == CMD_WRITE) {
 47a:	84 30       	cpi	r24, 0x04	; 4
 47c:	f1 f5       	brne	.+124    	; 0x4fa <__LOCK_REGION_LENGTH__+0xfa>
						if (buf[len-2] == 1) { // TODO multi mode.
 47e:	88 2d       	mov	r24, r8
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	ef ef       	ldi	r30, 0xFF	; 255
 484:	ff ef       	ldi	r31, 0xFF	; 255
 486:	ec 0f       	add	r30, r28
 488:	fd 1f       	adc	r31, r29
 48a:	e8 0f       	add	r30, r24
 48c:	f9 1f       	adc	r31, r25
 48e:	20 81       	ld	r18, Z
 490:	21 30       	cpi	r18, 0x01	; 1
 492:	09 f0       	breq	.+2      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 494:	7b c0       	rjmp	.+246    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
							uint8_t addr = buf[len-3];
 496:	ee ef       	ldi	r30, 0xFE	; 254
 498:	ff ef       	ldi	r31, 0xFF	; 255
 49a:	ec 0f       	add	r30, r28
 49c:	fd 1f       	adc	r31, r29
 49e:	e8 0f       	add	r30, r24
 4a0:	f9 1f       	adc	r31, r25
 4a2:	80 81       	ld	r24, Z
							if (addr == 0) {
 4a4:	81 11       	cpse	r24, r1
 4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
								device_id = buf[3];
 4a8:	8c 81       	ldd	r24, Y+4	; 0x04
 4aa:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <device_id>
 4ae:	17 c0       	rjmp	.+46     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
								} else if (addr >= SENSOR1_OFFSET && addr < SENSOR1_OFFSET + SENSOR1_SIZE) {
 4b0:	60 ef       	ldi	r22, 0xF0	; 240
 4b2:	68 0f       	add	r22, r24
 4b4:	60 34       	cpi	r22, 0x40	; 64
 4b6:	40 f4       	brcc	.+16     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
								lis3dh_write(&buf[3], addr - SENSOR1_OFFSET, len - 6, SENSOR1_CS);
 4b8:	49 ef       	ldi	r20, 0xF9	; 249
 4ba:	40 0f       	add	r20, r16
 4bc:	21 e0       	ldi	r18, 0x01	; 1
 4be:	ce 01       	movw	r24, r28
 4c0:	04 96       	adiw	r24, 0x04	; 4
 4c2:	0e 94 a9 00 	call	0x152	; 0x152 <lis3dh_write>
 4c6:	0b c0       	rjmp	.+22     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
								} else if (addr >= SENSOR2_OFFSET && addr < SENSOR2_OFFSET + SENSOR2_SIZE) {
 4c8:	60 eb       	ldi	r22, 0xB0	; 176
 4ca:	68 0f       	add	r22, r24
 4cc:	60 34       	cpi	r22, 0x40	; 64
 4ce:	38 f4       	brcc	.+14     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
								lis3dh_write(&buf[3], addr - SENSOR2_OFFSET, len - 6, SENSOR2_CS);
 4d0:	49 ef       	ldi	r20, 0xF9	; 249
 4d2:	40 0f       	add	r20, r16
 4d4:	22 e0       	ldi	r18, 0x02	; 2
 4d6:	ce 01       	movw	r24, r28
 4d8:	04 96       	adiw	r24, 0x04	; 4
 4da:	0e 94 a9 00 	call	0x152	; 0x152 <lis3dh_write>
							}
							buf[0] = 5;
 4de:	99 82       	std	Y+1, r9	; 0x01
							buf[1] = 0x80 | CMD_WRITE;
 4e0:	aa 82       	std	Y+2, r10	; 0x02
							buf[2] = 0x00;
 4e2:	1b 82       	std	Y+3, r1	; 0x03
							buf[3] = device_id;
 4e4:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <device_id>
 4e8:	8c 83       	std	Y+4, r24	; 0x04
							buf[4] = 5 + (0x80 | CMD_WRITE) + device_id; // sum
 4ea:	87 57       	subi	r24, 0x77	; 119
 4ec:	8d 83       	std	Y+5, r24	; 0x05
							writeBytes(buf, buf[0]);
 4ee:	69 2d       	mov	r22, r9
 4f0:	ce 01       	movw	r24, r28
 4f2:	01 96       	adiw	r24, 0x01	; 1
 4f4:	0e 94 0a 01 	call	0x214	; 0x214 <writeBytes>
 4f8:	49 c0       	rjmp	.+146    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
						}
						} else if (buf[0] == CMD_LOAD) {
 4fa:	81 30       	cpi	r24, 0x01	; 1
 4fc:	61 f4       	brne	.+24     	; 0x516 <__LOCK_REGION_LENGTH__+0x116>
						buf[0] = 5;
 4fe:	99 82       	std	Y+1, r9	; 0x01
						buf[1] = 0x80 | CMD_LOAD;
 500:	ba 82       	std	Y+2, r11	; 0x02
						buf[2] = 0x00;
 502:	1b 82       	std	Y+3, r1	; 0x03
						buf[3] = device_id;
 504:	6c 83       	std	Y+4, r22	; 0x04
						buf[4] = 5 + (0x80 | CMD_LOAD) + device_id; // sum
 506:	6a 57       	subi	r22, 0x7A	; 122
 508:	6d 83       	std	Y+5, r22	; 0x05
						writeBytes(buf, buf[0]);
 50a:	69 2d       	mov	r22, r9
 50c:	ce 01       	movw	r24, r28
 50e:	01 96       	adiw	r24, 0x01	; 1
 510:	0e 94 0a 01 	call	0x214	; 0x214 <writeBytes>
 514:	3b c0       	rjmp	.+118    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
						} else if (buf[0] == CMD_SAVE) {
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	c9 f5       	brne	.+114    	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
						eeprom_busy_wait();
 51a:	f9 99       	sbic	0x1f, 1	; 31
 51c:	fe cf       	rjmp	.-4      	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
						eeprom_update_byte(&eemem_devid, device_id);
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	90 e0       	ldi	r25, 0x00	; 0
 522:	0e 94 f5 02 	call	0x5ea	; 0x5ea <eeprom_update_byte>
						buf[0] = 5;
 526:	99 82       	std	Y+1, r9	; 0x01
						buf[1] = 0x80 | CMD_SAVE;
 528:	ca 82       	std	Y+2, r12	; 0x02
						buf[2] = 0x00;
 52a:	1b 82       	std	Y+3, r1	; 0x03
						buf[3] = device_id;
 52c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <device_id>
 530:	8c 83       	std	Y+4, r24	; 0x04
						buf[4] = 5 + (0x80 | CMD_SAVE) + device_id; // sum
 532:	89 57       	subi	r24, 0x79	; 121
 534:	8d 83       	std	Y+5, r24	; 0x05
						writeBytes(buf, buf[0]);
 536:	69 2d       	mov	r22, r9
 538:	ce 01       	movw	r24, r28
 53a:	01 96       	adiw	r24, 0x01	; 1
 53c:	0e 94 0a 01 	call	0x214	; 0x214 <writeBytes>
 540:	25 c0       	rjmp	.+74     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 542:	ef e9       	ldi	r30, 0x9F	; 159
 544:	ff e0       	ldi	r31, 0x0F	; 15
 546:	31 97       	sbiw	r30, 0x01	; 1
 548:	f1 f7       	brne	.-4      	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
 54a:	00 c0       	rjmp	.+0      	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
 54c:	00 00       	nop
 54e:	8f e9       	ldi	r24, 0x9F	; 159
 550:	9f e0       	ldi	r25, 0x0F	; 15
 552:	01 97       	sbiw	r24, 0x01	; 1
 554:	f1 f7       	brne	.-4      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
 556:	00 c0       	rjmp	.+0      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
 558:	00 00       	nop
 55a:	ef e9       	ldi	r30, 0x9F	; 159
 55c:	ff e0       	ldi	r31, 0x0F	; 15
 55e:	31 97       	sbiw	r30, 0x01	; 1
 560:	f1 f7       	brne	.-4      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
 562:	00 c0       	rjmp	.+0      	; 0x564 <__LOCK_REGION_LENGTH__+0x164>
 564:	00 00       	nop
 566:	8f e9       	ldi	r24, 0x9F	; 159
 568:	9f e0       	ldi	r25, 0x0F	; 15
 56a:	01 97       	sbiw	r24, 0x01	; 1
 56c:	f1 f7       	brne	.-4      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
 56e:	00 c0       	rjmp	.+0      	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
 570:	00 00       	nop
					// clear_rx_buf();
				}
				} else {
				// debug
				delay_ms(4);
				send_byte(2);
 572:	82 e0       	ldi	r24, 0x02	; 2
 574:	0e 94 53 00 	call	0xa6	; 0xa6 <send_byte>
				send_byte(recv_byte());
 578:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <recv_byte>
 57c:	0e 94 53 00 	call	0xa6	; 0xa6 <send_byte>
				uart_puts(".");
 580:	80 e0       	ldi	r24, 0x00	; 0
 582:	91 e0       	ldi	r25, 0x01	; 1
 584:	0e 94 23 01 	call	0x246	; 0x246 <uart_puts>
				clear_rx_buf();
 588:	0e 94 05 01 	call	0x20a	; 0x20a <clear_rx_buf>
			}
			} else {
			delay_ms(1);
		}

		if (count == 0) {
 58c:	11 11       	cpse	r17, r1
 58e:	1b c0       	rjmp	.+54     	; 0x5c6 <__LOCK_REGION_LENGTH__+0x1c6>
			if ((PINC & 0x20) == 0) {
 590:	35 99       	sbic	0x06, 5	; 6
 592:	16 c0       	rjmp	.+44     	; 0x5c0 <__LOCK_REGION_LENGTH__+0x1c0>
				send_byte(lis3dh_read8(0x0f, SENSOR2_CS));
 594:	62 e0       	ldi	r22, 0x02	; 2
 596:	8f e0       	ldi	r24, 0x0F	; 15
 598:	0e 94 65 00 	call	0xca	; 0xca <lis3dh_read8>
 59c:	0e 94 53 00 	call	0xa6	; 0xa6 <send_byte>
				uart_puts("Hello!\r\n");
 5a0:	82 e0       	ldi	r24, 0x02	; 2
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	0e 94 23 01 	call	0x246	; 0x246 <uart_puts>

				PORTD |= 0x80; // LED1
 5a8:	5f 9a       	sbi	0x0b, 7	; 11
 5aa:	88 ec       	ldi	r24, 0xC8	; 200
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	ef e9       	ldi	r30, 0x9F	; 159
 5b0:	ff e0       	ldi	r31, 0x0F	; 15
 5b2:	31 97       	sbiw	r30, 0x01	; 1
 5b4:	f1 f7       	brne	.-4      	; 0x5b2 <__LOCK_REGION_LENGTH__+0x1b2>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
 5b8:	00 00       	nop
 5ba:	01 97       	sbiw	r24, 0x01	; 1
#define SENSOR2_CS PB2
#define SENSOR2_OFFSET (0x10 + 0x40)
#define SENSOR2_SIZE 0x40

static void delay_ms(uint16_t w){
	while (w-->0) _delay_ms(1);
 5bc:	c1 f7       	brne	.-16     	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
				send_byte(lis3dh_read8(0x0f, SENSOR2_CS));
				uart_puts("Hello!\r\n");

				PORTD |= 0x80; // LED1
				delay_ms(200);
				PORTD &= ~0x80; // LED1
 5be:	5f 98       	cbi	0x0b, 7	; 11
			}
			PORTD ^= 0x80; // LED1
 5c0:	8b b1       	in	r24, 0x0b	; 11
 5c2:	80 58       	subi	r24, 0x80	; 128
 5c4:	8b b9       	out	0x0b, r24	; 11
	device_id = eeprom_read_byte(&eemem_devid);
	if (device_id == 0xff) device_id = 0;

	sei();

	for (uint8_t count = 0;;count ++) {
 5c6:	1f 5f       	subi	r17, 0xFF	; 255
				delay_ms(200);
				PORTD &= ~0x80; // LED1
			}
			PORTD ^= 0x80; // LED1
		}
	}
 5c8:	d6 ce       	rjmp	.-596    	; 0x376 <main+0x7a>
							} else if (addr >= 0xA2) {
							for (uint8_t i = 0; i < len; i++) {
								//buf[4+i] = pgm_read_byte(&pgm_version[i]);
							}
						}
						buf[0] = len + 5;
 5ca:	99 82       	std	Y+1, r9	; 0x01
						buf[1] = 0x80 | CMD_READ;
 5cc:	fa 82       	std	Y+2, r15	; 0x02
						buf[2] = 0x00;
 5ce:	1b 82       	std	Y+3, r1	; 0x03
						buf[3] = device_id;
 5d0:	6c 83       	std	Y+4, r22	; 0x04
						buf[len + 4] = 0;
 5d2:	1d 82       	std	Y+5, r1	; 0x05
 5d4:	26 2d       	mov	r18, r6
 5d6:	37 2d       	mov	r19, r7
 5d8:	31 cf       	rjmp	.-414    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>

000005da <eeprom_read_byte>:
 5da:	f9 99       	sbic	0x1f, 1	; 31
 5dc:	fe cf       	rjmp	.-4      	; 0x5da <eeprom_read_byte>
 5de:	92 bd       	out	0x22, r25	; 34
 5e0:	81 bd       	out	0x21, r24	; 33
 5e2:	f8 9a       	sbi	0x1f, 0	; 31
 5e4:	99 27       	eor	r25, r25
 5e6:	80 b5       	in	r24, 0x20	; 32
 5e8:	08 95       	ret

000005ea <eeprom_update_byte>:
 5ea:	26 2f       	mov	r18, r22

000005ec <eeprom_update_r18>:
 5ec:	f9 99       	sbic	0x1f, 1	; 31
 5ee:	fe cf       	rjmp	.-4      	; 0x5ec <eeprom_update_r18>
 5f0:	92 bd       	out	0x22, r25	; 34
 5f2:	81 bd       	out	0x21, r24	; 33
 5f4:	f8 9a       	sbi	0x1f, 0	; 31
 5f6:	01 97       	sbiw	r24, 0x01	; 1
 5f8:	00 b4       	in	r0, 0x20	; 32
 5fa:	02 16       	cp	r0, r18
 5fc:	39 f0       	breq	.+14     	; 0x60c <eeprom_update_r18+0x20>
 5fe:	1f ba       	out	0x1f, r1	; 31
 600:	20 bd       	out	0x20, r18	; 32
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	f8 94       	cli
 606:	fa 9a       	sbi	0x1f, 2	; 31
 608:	f9 9a       	sbi	0x1f, 1	; 31
 60a:	0f be       	out	0x3f, r0	; 63
 60c:	08 95       	ret

0000060e <_exit>:
 60e:	f8 94       	cli

00000610 <__stop_program>:
 610:	ff cf       	rjmp	.-2      	; 0x610 <__stop_program>
