
Timer0_CTC_loop.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000106  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000068c  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000224  00000000  00000000  00000e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001050  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000363  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004d  00000000  00000000  000013d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001424  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 57 00 	jmp	0xae	; 0xae <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>

int main(void) {
  uint8_t OVFCount = 0;
  // set PD6 as output
  DDRB |= (1 << DDB2);
  80:	22 9a       	sbi	0x04, 2	; 4
  // Clear the output bit -led on
  PORTB &= ~(1 << DDB2);
  82:	2a 98       	cbi	0x05, 2	; 5
  // Set Initial Timer value
  TCNT0 = 0;
  84:	16 bc       	out	0x26, r1	; 38
  // Place TOP timer value to Output compare register
  OCR0A = 0x9B;
  86:	8b e9       	ldi	r24, 0x9B	; 155
  88:	87 bd       	out	0x27, r24	; 39
  // Set CTC mode
  TCCR0A |= (1 << WGM01);
  8a:	84 b5       	in	r24, 0x24	; 36
  8c:	82 60       	ori	r24, 0x02	; 2
  8e:	84 bd       	out	0x24, r24	; 36
  // Set pre-scalar 1024 and start timer
  TCCR0B |= (1 << CS02) | (1 << CS00);
  90:	85 b5       	in	r24, 0x25	; 37
  92:	85 60       	ori	r24, 0x05	; 5
  94:	85 bd       	out	0x25, r24	; 37
  while (1) {
    while ((TIFR0 & 0x02) == 0)
      ;
    TIFR0 = 0x02; // clear timer1 compare overflow flag
  96:	92 e0       	ldi	r25, 0x02	; 2
    OVFCount++;
    if (OVFCount == 10) {
      PORTB ^= (1 << DDB2);
  98:	24 e0       	ldi	r18, 0x04	; 4
 * Author : VenkatesanMuthukumar
 */

#include <avr/io.h>

int main(void) {
  9a:	8a e0       	ldi	r24, 0x0A	; 10
  // Set CTC mode
  TCCR0A |= (1 << WGM01);
  // Set pre-scalar 1024 and start timer
  TCCR0B |= (1 << CS02) | (1 << CS00);
  while (1) {
    while ((TIFR0 & 0x02) == 0)
  9c:	a9 9b       	sbis	0x15, 1	; 21
  9e:	fe cf       	rjmp	.-4      	; 0x9c <main+0x1c>
      ;
    TIFR0 = 0x02; // clear timer1 compare overflow flag
  a0:	95 bb       	out	0x15, r25	; 21
  a2:	81 50       	subi	r24, 0x01	; 1
    OVFCount++;
    if (OVFCount == 10) {
  a4:	d9 f7       	brne	.-10     	; 0x9c <main+0x1c>
      PORTB ^= (1 << DDB2);
  a6:	85 b1       	in	r24, 0x05	; 5
  a8:	82 27       	eor	r24, r18
  aa:	85 b9       	out	0x05, r24	; 5
  ac:	f6 cf       	rjmp	.-20     	; 0x9a <main+0x1a>

000000ae <_exit>:
  ae:	f8 94       	cli

000000b0 <__stop_program>:
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <__stop_program>
