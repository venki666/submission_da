
nrf24L01_plus_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000876  0000090a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000876  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800112  00800112  0000091c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000091c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000094c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ae3  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009a1  00000000  00000000  0000255f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000083b  00000000  00000000  00002f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f8  00000000  00000000  0000373c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000067a  00000000  00000000  00003a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e35  00000000  00000000  000040ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004ee3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f8 e0       	ldi	r31, 0x08	; 8
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 31       	cpi	r26, 0x17	; 23
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 91 00 	call	0x122	; 0x122 <main>
  9e:	0c 94 39 04 	jmp	0x872	; 0x872 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <setup_rf>:
    }

    return 0;
}

nRF24L01 *setup_rf(void) {
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
    nRF24L01 *rf = nRF24L01_init();
  aa:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <nRF24L01_init>
  ae:	ec 01       	movw	r28, r24
    rf->ss.port = &PORTB;
  b0:	85 e2       	ldi	r24, 0x25	; 37
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	99 83       	std	Y+1, r25	; 0x01
  b6:	88 83       	st	Y, r24
    rf->ss.pin = PB2;
  b8:	22 e0       	ldi	r18, 0x02	; 2
  ba:	2a 83       	std	Y+2, r18	; 0x02
    rf->ce.port = &PORTB;
  bc:	9c 83       	std	Y+4, r25	; 0x04
  be:	8b 83       	std	Y+3, r24	; 0x03
    rf->ce.pin = PB1;
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	2d 83       	std	Y+5, r18	; 0x05
    rf->sck.port = &PORTB;
  c4:	9f 83       	std	Y+7, r25	; 0x07
  c6:	8e 83       	std	Y+6, r24	; 0x06
    rf->sck.pin = PB5;
  c8:	25 e0       	ldi	r18, 0x05	; 5
  ca:	28 87       	std	Y+8, r18	; 0x08
    rf->mosi.port = &PORTB;
  cc:	9a 87       	std	Y+10, r25	; 0x0a
  ce:	89 87       	std	Y+9, r24	; 0x09
    rf->mosi.pin = PB3;
  d0:	23 e0       	ldi	r18, 0x03	; 3
  d2:	2b 87       	std	Y+11, r18	; 0x0b
    rf->miso.port = &PORTB;
  d4:	9d 87       	std	Y+13, r25	; 0x0d
  d6:	8c 87       	std	Y+12, r24	; 0x0c
    rf->miso.pin = PB4;
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	8e 87       	std	Y+14, r24	; 0x0e
    // interrupt on falling edge of INT0 (PD2)
    EICRA |= _BV(ISC01);
  dc:	e9 e6       	ldi	r30, 0x69	; 105
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	82 60       	ori	r24, 0x02	; 2
  e4:	80 83       	st	Z, r24
    EIMSK |= _BV(INT0);
  e6:	e8 9a       	sbi	0x1d, 0	; 29
    nRF24L01_begin(rf);
  e8:	ce 01       	movw	r24, r28
  ea:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <nRF24L01_begin>
    return rf;
}
  ee:	ce 01       	movw	r24, r28
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <process_message>:

void process_message(char *message) {
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	ec 01       	movw	r28, r24
    if (strcmp(message, "ON") == 0)
  fc:	6b e0       	ldi	r22, 0x0B	; 11
  fe:	71 e0       	ldi	r23, 0x01	; 1
 100:	0e 94 30 04 	call	0x860	; 0x860 <strcmp>
 104:	89 2b       	or	r24, r25
 106:	11 f4       	brne	.+4      	; 0x10c <process_message+0x16>
    DDRB |= _BV(PB0);
    PORTB &= ~_BV(PB0);
}

inline void set_led_high(void) {
    PORTB |= _BV(PB0);
 108:	28 9a       	sbi	0x05, 0	; 5
 10a:	08 c0       	rjmp	.+16     	; 0x11c <process_message+0x26>
}

void process_message(char *message) {
    if (strcmp(message, "ON") == 0)
        set_led_high();
    else if (strcmp(message, "OFF") == 0)
 10c:	6e e0       	ldi	r22, 0x0E	; 14
 10e:	71 e0       	ldi	r23, 0x01	; 1
 110:	ce 01       	movw	r24, r28
 112:	0e 94 30 04 	call	0x860	; 0x860 <strcmp>
 116:	89 2b       	or	r24, r25
 118:	09 f4       	brne	.+2      	; 0x11c <process_message+0x26>
inline void set_led_high(void) {
    PORTB |= _BV(PB0);
}

inline void set_led_low(void) {
    PORTB &= ~_BV(PB0);
 11a:	28 98       	cbi	0x05, 0	; 5
void process_message(char *message) {
    if (strcmp(message, "ON") == 0)
        set_led_high();
    else if (strcmp(message, "OFF") == 0)
        set_led_low();
}
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <main>:
inline void  set_led_high(void);
inline void  set_led_low(void);

volatile bool rf_interrupt = false;

int main(void) {
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
 12a:	ad 97       	sbiw	r28, 0x2d	; 45
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	f8 94       	cli
 130:	de bf       	out	0x3e, r29	; 62
 132:	0f be       	out	0x3f, r0	; 63
 134:	cd bf       	out	0x3d, r28	; 61
    uint8_t address[5] = { 0x01, 0x01, 0x01, 0x01, 0x01 };
 136:	85 e0       	ldi	r24, 0x05	; 5
 138:	e6 e0       	ldi	r30, 0x06	; 6
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	de 01       	movw	r26, r28
 13e:	11 96       	adiw	r26, 0x01	; 1
 140:	01 90       	ld	r0, Z+
 142:	0d 92       	st	X+, r0
 144:	8a 95       	dec	r24
 146:	e1 f7       	brne	.-8      	; 0x140 <main+0x1e>
    else if (strcmp(message, "OFF") == 0)
        set_led_low();
}

inline void prepare_led_pin(void) {
    DDRB |= _BV(PB0);
 148:	20 9a       	sbi	0x04, 0	; 4
    PORTB &= ~_BV(PB0);
 14a:	28 98       	cbi	0x05, 0	; 5
volatile bool rf_interrupt = false;

int main(void) {
    uint8_t address[5] = { 0x01, 0x01, 0x01, 0x01, 0x01 };
    prepare_led_pin();
    sei();
 14c:	78 94       	sei
    nRF24L01 *rf = setup_rf();
 14e:	0e 94 53 00 	call	0xa6	; 0xa6 <setup_rf>
 152:	8c 01       	movw	r16, r24
    nRF24L01_listen(rf, 0, address);
 154:	ae 01       	movw	r20, r28
 156:	4f 5f       	subi	r20, 0xFF	; 255
 158:	5f 4f       	sbci	r21, 0xFF	; 255
 15a:	60 e0       	ldi	r22, 0x00	; 0
 15c:	70 e0       	ldi	r23, 0x00	; 0
 15e:	0e 94 4b 01 	call	0x296	; 0x296 <nRF24L01_listen>
    uint8_t addr[5];
    nRF24L01_read_register(rf, CONFIG, addr, 1);
 162:	21 e0       	ldi	r18, 0x01	; 1
 164:	30 e0       	ldi	r19, 0x00	; 0
 166:	ae 01       	movw	r20, r28
 168:	4a 5f       	subi	r20, 0xFA	; 250
 16a:	5f 4f       	sbci	r21, 0xFF	; 255
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	c8 01       	movw	r24, r16
 170:	0e 94 3d 01 	call	0x27a	; 0x27a <nRF24L01_read_register>

    while (true) {
        if (rf_interrupt) {
 174:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 178:	88 23       	and	r24, r24
 17a:	e1 f3       	breq	.-8      	; 0x174 <main+0x52>
            rf_interrupt = false;
 17c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
            while (nRF24L01_data_received(rf)) {
 180:	0a c0       	rjmp	.+20     	; 0x196 <main+0x74>
                nRF24L01Message msg;
                nRF24L01_read_received_data(rf, &msg);
 182:	be 01       	movw	r22, r28
 184:	65 5f       	subi	r22, 0xF5	; 245
 186:	7f 4f       	sbci	r23, 0xFF	; 255
 188:	c8 01       	movw	r24, r16
 18a:	0e 94 df 02 	call	0x5be	; 0x5be <nRF24L01_read_received_data>
                process_message((char *)msg.data);
 18e:	ce 01       	movw	r24, r28
 190:	0d 96       	adiw	r24, 0x0d	; 13
 192:	0e 94 7b 00 	call	0xf6	; 0xf6 <process_message>
    nRF24L01_read_register(rf, CONFIG, addr, 1);

    while (true) {
        if (rf_interrupt) {
            rf_interrupt = false;
            while (nRF24L01_data_received(rf)) {
 196:	c8 01       	movw	r24, r16
 198:	0e 94 b2 01 	call	0x364	; 0x364 <nRF24L01_data_received>
 19c:	81 11       	cpse	r24, r1
 19e:	f1 cf       	rjmp	.-30     	; 0x182 <main+0x60>
                nRF24L01Message msg;
                nRF24L01_read_received_data(rf, &msg);
                process_message((char *)msg.data);
            }

            nRF24L01_listen(rf, 0, address);
 1a0:	ae 01       	movw	r20, r28
 1a2:	4f 5f       	subi	r20, 0xFF	; 255
 1a4:	5f 4f       	sbci	r21, 0xFF	; 255
 1a6:	60 e0       	ldi	r22, 0x00	; 0
 1a8:	70 e0       	ldi	r23, 0x00	; 0
 1aa:	c8 01       	movw	r24, r16
 1ac:	0e 94 4b 01 	call	0x296	; 0x296 <nRF24L01_listen>
 1b0:	e1 cf       	rjmp	.-62     	; 0x174 <main+0x52>

000001b2 <__vector_1>:
inline void set_led_low(void) {
    PORTB &= ~_BV(PB0);
}

// nRF24L01 interrupt
ISR(INT0_vect) {
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	8f 93       	push	r24
    rf_interrupt = true;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
}
 1c4:	8f 91       	pop	r24
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <copy_address>:
    uint8_t config;
    nRF24L01_read_register(rf, CONFIG, &config, 1);
    config |= _BV(PRIM_RX);
    nRF24L01_write_register(rf, CONFIG, &config, 1);
    return success;
}
 1d0:	fc 01       	movw	r30, r24
 1d2:	a6 2f       	mov	r26, r22
 1d4:	b7 2f       	mov	r27, r23
 1d6:	9c 01       	movw	r18, r24
 1d8:	2b 5f       	subi	r18, 0xFB	; 251
 1da:	3f 4f       	sbci	r19, 0xFF	; 255
 1dc:	91 91       	ld	r25, Z+
 1de:	9d 93       	st	X+, r25
 1e0:	e2 17       	cp	r30, r18
 1e2:	f3 07       	cpc	r31, r19
 1e4:	d9 f7       	brne	.-10     	; 0x1dc <copy_address+0xc>
 1e6:	08 95       	ret

000001e8 <nRF24L01_init>:
 1e8:	80 e1       	ldi	r24, 0x10	; 16
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 0f 03 	call	0x61e	; 0x61e <malloc>
 1f0:	20 e1       	ldi	r18, 0x10	; 16
 1f2:	fc 01       	movw	r30, r24
 1f4:	11 92       	st	Z+, r1
 1f6:	2a 95       	dec	r18
 1f8:	e9 f7       	brne	.-6      	; 0x1f4 <nRF24L01_init+0xc>
 1fa:	08 95       	ret

000001fc <nRF24L01_send_command>:
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	ec 01       	movw	r28, r24
 202:	da 01       	movw	r26, r20
 204:	e8 81       	ld	r30, Y
 206:	f9 81       	ldd	r31, Y+1	; 0x01
 208:	50 81       	ld	r21, Z
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0a 80       	ldd	r0, Y+2	; 0x02
 210:	02 c0       	rjmp	.+4      	; 0x216 <nRF24L01_send_command+0x1a>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	0a 94       	dec	r0
 218:	e2 f7       	brpl	.-8      	; 0x212 <nRF24L01_send_command+0x16>
 21a:	80 95       	com	r24
 21c:	85 23       	and	r24, r21
 21e:	80 83       	st	Z, r24
 220:	6e bd       	out	0x2e, r22	; 46
 222:	0d b4       	in	r0, 0x2d	; 45
 224:	07 fe       	sbrs	r0, 7
 226:	fd cf       	rjmp	.-6      	; 0x222 <nRF24L01_send_command+0x26>
 228:	8e b5       	in	r24, 0x2e	; 46
 22a:	8f 87       	std	Y+15, r24	; 0x0f
 22c:	21 15       	cp	r18, r1
 22e:	31 05       	cpc	r19, r1
 230:	79 f0       	breq	.+30     	; 0x250 <nRF24L01_send_command+0x54>
 232:	fd 01       	movw	r30, r26
 234:	2a 0f       	add	r18, r26
 236:	3b 1f       	adc	r19, r27
 238:	df 01       	movw	r26, r30
 23a:	90 81       	ld	r25, Z
 23c:	9e bd       	out	0x2e, r25	; 46
 23e:	0d b4       	in	r0, 0x2d	; 45
 240:	07 fe       	sbrs	r0, 7
 242:	fd cf       	rjmp	.-6      	; 0x23e <nRF24L01_send_command+0x42>
 244:	9e b5       	in	r25, 0x2e	; 46
 246:	9c 93       	st	X, r25
 248:	31 96       	adiw	r30, 0x01	; 1
 24a:	e2 17       	cp	r30, r18
 24c:	f3 07       	cpc	r31, r19
 24e:	a1 f7       	brne	.-24     	; 0x238 <nRF24L01_send_command+0x3c>
 250:	e8 81       	ld	r30, Y
 252:	f9 81       	ldd	r31, Y+1	; 0x01
 254:	20 81       	ld	r18, Z
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	0a 80       	ldd	r0, Y+2	; 0x02
 25c:	02 c0       	rjmp	.+4      	; 0x262 <nRF24L01_send_command+0x66>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <nRF24L01_send_command+0x62>
 266:	82 2b       	or	r24, r18
 268:	80 83       	st	Z, r24
 26a:	8f 85       	ldd	r24, Y+15	; 0x0f
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <nRF24L01_write_register>:
 272:	60 62       	ori	r22, 0x20	; 32
 274:	0e 94 fe 00 	call	0x1fc	; 0x1fc <nRF24L01_send_command>
 278:	08 95       	ret

0000027a <nRF24L01_read_register>:
 27a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <nRF24L01_send_command>
 27e:	08 95       	ret

00000280 <nRF24L01_no_op>:
 280:	20 e0       	ldi	r18, 0x00	; 0
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	40 e0       	ldi	r20, 0x00	; 0
 286:	50 e0       	ldi	r21, 0x00	; 0
 288:	6f ef       	ldi	r22, 0xFF	; 255
 28a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <nRF24L01_send_command>
 28e:	08 95       	ret

00000290 <nRF24L01_update_status>:
 290:	0e 94 40 01 	call	0x280	; 0x280 <nRF24L01_no_op>
 294:	08 95       	ret

00000296 <nRF24L01_listen>:
 296:	df 92       	push	r13
 298:	ef 92       	push	r14
 29a:	ff 92       	push	r15
 29c:	0f 93       	push	r16
 29e:	1f 93       	push	r17
 2a0:	cf 93       	push	r28
 2a2:	df 93       	push	r29
 2a4:	00 d0       	rcall	.+0      	; 0x2a6 <nRF24L01_listen+0x10>
 2a6:	00 d0       	rcall	.+0      	; 0x2a8 <nRF24L01_listen+0x12>
 2a8:	00 d0       	rcall	.+0      	; 0x2aa <nRF24L01_listen+0x14>
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	7c 01       	movw	r14, r24
 2b0:	d6 2e       	mov	r13, r22
 2b2:	ca 01       	movw	r24, r20
 2b4:	be 01       	movw	r22, r28
 2b6:	6f 5f       	subi	r22, 0xFF	; 255
 2b8:	7f 4f       	sbci	r23, 0xFF	; 255
 2ba:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <copy_address>
 2be:	6a e0       	ldi	r22, 0x0A	; 10
 2c0:	6d 0d       	add	r22, r13
 2c2:	25 e0       	ldi	r18, 0x05	; 5
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	ae 01       	movw	r20, r28
 2c8:	4f 5f       	subi	r20, 0xFF	; 255
 2ca:	5f 4f       	sbci	r21, 0xFF	; 255
 2cc:	c7 01       	movw	r24, r14
 2ce:	0e 94 39 01 	call	0x272	; 0x272 <nRF24L01_write_register>
 2d2:	21 e0       	ldi	r18, 0x01	; 1
 2d4:	30 e0       	ldi	r19, 0x00	; 0
 2d6:	ae 01       	movw	r20, r28
 2d8:	4a 5f       	subi	r20, 0xFA	; 250
 2da:	5f 4f       	sbci	r21, 0xFF	; 255
 2dc:	62 e0       	ldi	r22, 0x02	; 2
 2de:	c7 01       	movw	r24, r14
 2e0:	0e 94 3d 01 	call	0x27a	; 0x27a <nRF24L01_read_register>
 2e4:	01 e0       	ldi	r16, 0x01	; 1
 2e6:	10 e0       	ldi	r17, 0x00	; 0
 2e8:	c8 01       	movw	r24, r16
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <nRF24L01_listen+0x5a>
 2ec:	88 0f       	add	r24, r24
 2ee:	99 1f       	adc	r25, r25
 2f0:	da 94       	dec	r13
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <nRF24L01_listen+0x56>
 2f4:	9e 81       	ldd	r25, Y+6	; 0x06
 2f6:	89 2b       	or	r24, r25
 2f8:	8e 83       	std	Y+6, r24	; 0x06
 2fa:	21 e0       	ldi	r18, 0x01	; 1
 2fc:	30 e0       	ldi	r19, 0x00	; 0
 2fe:	ae 01       	movw	r20, r28
 300:	4a 5f       	subi	r20, 0xFA	; 250
 302:	5f 4f       	sbci	r21, 0xFF	; 255
 304:	62 e0       	ldi	r22, 0x02	; 2
 306:	c7 01       	movw	r24, r14
 308:	0e 94 39 01 	call	0x272	; 0x272 <nRF24L01_write_register>
 30c:	d7 01       	movw	r26, r14
 30e:	13 96       	adiw	r26, 0x03	; 3
 310:	ed 91       	ld	r30, X+
 312:	fc 91       	ld	r31, X
 314:	14 97       	sbiw	r26, 0x04	; 4
 316:	80 81       	ld	r24, Z
 318:	15 96       	adiw	r26, 0x05	; 5
 31a:	0c 90       	ld	r0, X
 31c:	02 c0       	rjmp	.+4      	; 0x322 <nRF24L01_listen+0x8c>
 31e:	00 0f       	add	r16, r16
 320:	11 1f       	adc	r17, r17
 322:	0a 94       	dec	r0
 324:	e2 f7       	brpl	.-8      	; 0x31e <nRF24L01_listen+0x88>
 326:	08 2b       	or	r16, r24
 328:	00 83       	st	Z, r16
 32a:	26 96       	adiw	r28, 0x06	; 6
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	f8 94       	cli
 330:	de bf       	out	0x3e, r29	; 62
 332:	0f be       	out	0x3f, r0	; 63
 334:	cd bf       	out	0x3d, r28	; 61
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	df 90       	pop	r13
 344:	08 95       	ret

00000346 <nRF24L01_pipe_number_received>:
 346:	fc 01       	movw	r30, r24
 348:	27 85       	ldd	r18, Z+15	; 0x0f
 34a:	2e 70       	andi	r18, 0x0E	; 14
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	35 95       	asr	r19
 350:	27 95       	ror	r18
 352:	26 30       	cpi	r18, 0x06	; 6
 354:	31 05       	cpc	r19, r1
 356:	1c f4       	brge	.+6      	; 0x35e <nRF24L01_pipe_number_received+0x18>
 358:	82 2f       	mov	r24, r18
 35a:	93 2f       	mov	r25, r19
 35c:	08 95       	ret
 35e:	8f ef       	ldi	r24, 0xFF	; 255
 360:	9f ef       	ldi	r25, 0xFF	; 255
 362:	08 95       	ret

00000364 <nRF24L01_data_received>:
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	ec 01       	movw	r28, r24
 36a:	eb 81       	ldd	r30, Y+3	; 0x03
 36c:	fc 81       	ldd	r31, Y+4	; 0x04
 36e:	20 81       	ld	r18, Z
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0d 80       	ldd	r0, Y+5	; 0x05
 376:	02 c0       	rjmp	.+4      	; 0x37c <nRF24L01_data_received+0x18>
 378:	88 0f       	add	r24, r24
 37a:	99 1f       	adc	r25, r25
 37c:	0a 94       	dec	r0
 37e:	e2 f7       	brpl	.-8      	; 0x378 <nRF24L01_data_received+0x14>
 380:	80 95       	com	r24
 382:	82 23       	and	r24, r18
 384:	80 83       	st	Z, r24
 386:	ce 01       	movw	r24, r28
 388:	0e 94 48 01 	call	0x290	; 0x290 <nRF24L01_update_status>
 38c:	ce 01       	movw	r24, r28
 38e:	0e 94 a3 01 	call	0x346	; 0x346 <nRF24L01_pipe_number_received>
 392:	89 2f       	mov	r24, r25
 394:	80 95       	com	r24
 396:	88 1f       	adc	r24, r24
 398:	88 27       	eor	r24, r24
 39a:	88 1f       	adc	r24, r24
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <nRF24L01_clear_interrupts>:
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	1f 92       	push	r1
 3a8:	cd b7       	in	r28, 0x3d	; 61
 3aa:	de b7       	in	r29, 0x3e	; 62
 3ac:	20 e7       	ldi	r18, 0x70	; 112
 3ae:	29 83       	std	Y+1, r18	; 0x01
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	ae 01       	movw	r20, r28
 3b6:	4f 5f       	subi	r20, 0xFF	; 255
 3b8:	5f 4f       	sbci	r21, 0xFF	; 255
 3ba:	67 e0       	ldi	r22, 0x07	; 7
 3bc:	0e 94 39 01 	call	0x272	; 0x272 <nRF24L01_write_register>
 3c0:	0f 90       	pop	r0
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <nRF24L01_begin>:
 3c8:	ff 92       	push	r15
 3ca:	0f 93       	push	r16
 3cc:	1f 93       	push	r17
 3ce:	cf 93       	push	r28
 3d0:	df 93       	push	r29
 3d2:	1f 92       	push	r1
 3d4:	cd b7       	in	r28, 0x3d	; 61
 3d6:	de b7       	in	r29, 0x3e	; 62
 3d8:	8c 01       	movw	r16, r24
 3da:	dc 01       	movw	r26, r24
 3dc:	ed 91       	ld	r30, X+
 3de:	fc 91       	ld	r31, X
 3e0:	11 97       	sbiw	r26, 0x01	; 1
 3e2:	42 91       	ld	r20, -Z
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	9c 01       	movw	r18, r24
 3ea:	12 96       	adiw	r26, 0x02	; 2
 3ec:	0c 90       	ld	r0, X
 3ee:	12 97       	sbiw	r26, 0x02	; 2
 3f0:	02 c0       	rjmp	.+4      	; 0x3f6 <nRF24L01_begin+0x2e>
 3f2:	22 0f       	add	r18, r18
 3f4:	33 1f       	adc	r19, r19
 3f6:	0a 94       	dec	r0
 3f8:	e2 f7       	brpl	.-8      	; 0x3f2 <nRF24L01_begin+0x2a>
 3fa:	24 2b       	or	r18, r20
 3fc:	20 83       	st	Z, r18
 3fe:	13 96       	adiw	r26, 0x03	; 3
 400:	ed 91       	ld	r30, X+
 402:	fc 91       	ld	r31, X
 404:	14 97       	sbiw	r26, 0x04	; 4
 406:	42 91       	ld	r20, -Z
 408:	9c 01       	movw	r18, r24
 40a:	15 96       	adiw	r26, 0x05	; 5
 40c:	0c 90       	ld	r0, X
 40e:	15 97       	sbiw	r26, 0x05	; 5
 410:	02 c0       	rjmp	.+4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 412:	22 0f       	add	r18, r18
 414:	33 1f       	adc	r19, r19
 416:	0a 94       	dec	r0
 418:	e2 f7       	brpl	.-8      	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 41a:	24 2b       	or	r18, r20
 41c:	20 83       	st	Z, r18
 41e:	ed 91       	ld	r30, X+
 420:	fc 91       	ld	r31, X
 422:	11 97       	sbiw	r26, 0x01	; 1
 424:	40 81       	ld	r20, Z
 426:	9c 01       	movw	r18, r24
 428:	12 96       	adiw	r26, 0x02	; 2
 42a:	0c 90       	ld	r0, X
 42c:	12 97       	sbiw	r26, 0x02	; 2
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 430:	22 0f       	add	r18, r18
 432:	33 1f       	adc	r19, r19
 434:	0a 94       	dec	r0
 436:	e2 f7       	brpl	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 438:	24 2b       	or	r18, r20
 43a:	20 83       	st	Z, r18
 43c:	13 96       	adiw	r26, 0x03	; 3
 43e:	ed 91       	ld	r30, X+
 440:	fc 91       	ld	r31, X
 442:	14 97       	sbiw	r26, 0x04	; 4
 444:	30 81       	ld	r19, Z
 446:	ac 01       	movw	r20, r24
 448:	15 96       	adiw	r26, 0x05	; 5
 44a:	0c 90       	ld	r0, X
 44c:	15 97       	sbiw	r26, 0x05	; 5
 44e:	02 c0       	rjmp	.+4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 450:	44 0f       	add	r20, r20
 452:	55 1f       	adc	r21, r21
 454:	0a 94       	dec	r0
 456:	e2 f7       	brpl	.-8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
 458:	24 2f       	mov	r18, r20
 45a:	20 95       	com	r18
 45c:	23 23       	and	r18, r19
 45e:	20 83       	st	Z, r18
 460:	2c b5       	in	r18, 0x2c	; 44
 462:	20 61       	ori	r18, 0x10	; 16
 464:	2c bd       	out	0x2c, r18	; 44
 466:	2c b5       	in	r18, 0x2c	; 44
 468:	20 64       	ori	r18, 0x40	; 64
 46a:	2c bd       	out	0x2c, r18	; 44
 46c:	16 96       	adiw	r26, 0x06	; 6
 46e:	ed 91       	ld	r30, X+
 470:	fc 91       	ld	r31, X
 472:	17 97       	sbiw	r26, 0x07	; 7
 474:	42 91       	ld	r20, -Z
 476:	9c 01       	movw	r18, r24
 478:	18 96       	adiw	r26, 0x08	; 8
 47a:	0c 90       	ld	r0, X
 47c:	18 97       	sbiw	r26, 0x08	; 8
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
 480:	22 0f       	add	r18, r18
 482:	33 1f       	adc	r19, r19
 484:	0a 94       	dec	r0
 486:	e2 f7       	brpl	.-8      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
 488:	24 2b       	or	r18, r20
 48a:	20 83       	st	Z, r18
 48c:	19 96       	adiw	r26, 0x09	; 9
 48e:	ed 91       	ld	r30, X+
 490:	fc 91       	ld	r31, X
 492:	1a 97       	sbiw	r26, 0x0a	; 10
 494:	42 91       	ld	r20, -Z
 496:	9c 01       	movw	r18, r24
 498:	1b 96       	adiw	r26, 0x0b	; 11
 49a:	0c 90       	ld	r0, X
 49c:	1b 97       	sbiw	r26, 0x0b	; 11
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4a0:	22 0f       	add	r18, r18
 4a2:	33 1f       	adc	r19, r19
 4a4:	0a 94       	dec	r0
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 4a8:	24 2b       	or	r18, r20
 4aa:	20 83       	st	Z, r18
 4ac:	1c 96       	adiw	r26, 0x0c	; 12
 4ae:	ed 91       	ld	r30, X+
 4b0:	fc 91       	ld	r31, X
 4b2:	1d 97       	sbiw	r26, 0x0d	; 13
 4b4:	22 91       	ld	r18, -Z
 4b6:	1e 96       	adiw	r26, 0x0e	; 14
 4b8:	0c 90       	ld	r0, X
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	0a 94       	dec	r0
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <__LOCK_REGION_LENGTH__+0xbc>
 4c4:	80 95       	com	r24
 4c6:	82 23       	and	r24, r18
 4c8:	80 83       	st	Z, r24
 4ca:	8c b5       	in	r24, 0x2c	; 44
 4cc:	87 7f       	andi	r24, 0xF7	; 247
 4ce:	8c bd       	out	0x2c, r24	; 44
 4d0:	8c b5       	in	r24, 0x2c	; 44
 4d2:	8b 7f       	andi	r24, 0xFB	; 251
 4d4:	8c bd       	out	0x2c, r24	; 44
 4d6:	8c b5       	in	r24, 0x2c	; 44
 4d8:	8e 7f       	andi	r24, 0xFE	; 254
 4da:	8c bd       	out	0x2c, r24	; 44
 4dc:	8c b5       	in	r24, 0x2c	; 44
 4de:	8d 7f       	andi	r24, 0xFD	; 253
 4e0:	8c bd       	out	0x2c, r24	; 44
 4e2:	8d b5       	in	r24, 0x2d	; 45
 4e4:	81 60       	ori	r24, 0x01	; 1
 4e6:	8d bd       	out	0x2d, r24	; 45
 4e8:	8c b5       	in	r24, 0x2c	; 44
 4ea:	8f 7d       	andi	r24, 0xDF	; 223
 4ec:	8c bd       	out	0x2c, r24	; 44
 4ee:	20 e0       	ldi	r18, 0x00	; 0
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	50 e0       	ldi	r21, 0x00	; 0
 4f6:	62 ee       	ldi	r22, 0xE2	; 226
 4f8:	c8 01       	movw	r24, r16
 4fa:	0e 94 fe 00 	call	0x1fc	; 0x1fc <nRF24L01_send_command>
 4fe:	20 e0       	ldi	r18, 0x00	; 0
 500:	30 e0       	ldi	r19, 0x00	; 0
 502:	40 e0       	ldi	r20, 0x00	; 0
 504:	50 e0       	ldi	r21, 0x00	; 0
 506:	61 ee       	ldi	r22, 0xE1	; 225
 508:	c8 01       	movw	r24, r16
 50a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <nRF24L01_send_command>
 50e:	c8 01       	movw	r24, r16
 510:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <nRF24L01_clear_interrupts>
 514:	8f e0       	ldi	r24, 0x0F	; 15
 516:	89 83       	std	Y+1, r24	; 0x01
 518:	21 e0       	ldi	r18, 0x01	; 1
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	ae 01       	movw	r20, r28
 51e:	4f 5f       	subi	r20, 0xFF	; 255
 520:	5f 4f       	sbci	r21, 0xFF	; 255
 522:	60 e0       	ldi	r22, 0x00	; 0
 524:	c8 01       	movw	r24, r16
 526:	0e 94 39 01 	call	0x272	; 0x272 <nRF24L01_write_register>
 52a:	0f 2e       	mov	r0, r31
 52c:	ff e3       	ldi	r31, 0x3F	; 63
 52e:	ff 2e       	mov	r15, r31
 530:	f0 2d       	mov	r31, r0
 532:	f9 82       	std	Y+1, r15	; 0x01
 534:	21 e0       	ldi	r18, 0x01	; 1
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	ae 01       	movw	r20, r28
 53a:	4f 5f       	subi	r20, 0xFF	; 255
 53c:	5f 4f       	sbci	r21, 0xFF	; 255
 53e:	61 e0       	ldi	r22, 0x01	; 1
 540:	c8 01       	movw	r24, r16
 542:	0e 94 39 01 	call	0x272	; 0x272 <nRF24L01_write_register>
 546:	f9 82       	std	Y+1, r15	; 0x01
 548:	21 e0       	ldi	r18, 0x01	; 1
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	ae 01       	movw	r20, r28
 54e:	4f 5f       	subi	r20, 0xFF	; 255
 550:	5f 4f       	sbci	r21, 0xFF	; 255
 552:	6c e1       	ldi	r22, 0x1C	; 28
 554:	c8 01       	movw	r24, r16
 556:	0e 94 39 01 	call	0x272	; 0x272 <nRF24L01_write_register>
 55a:	84 e0       	ldi	r24, 0x04	; 4
 55c:	89 83       	std	Y+1, r24	; 0x01
 55e:	21 e0       	ldi	r18, 0x01	; 1
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	ae 01       	movw	r20, r28
 564:	4f 5f       	subi	r20, 0xFF	; 255
 566:	5f 4f       	sbci	r21, 0xFF	; 255
 568:	6d e1       	ldi	r22, 0x1D	; 29
 56a:	c8 01       	movw	r24, r16
 56c:	0e 94 39 01 	call	0x272	; 0x272 <nRF24L01_write_register>
 570:	19 82       	std	Y+1, r1	; 0x01
 572:	21 e0       	ldi	r18, 0x01	; 1
 574:	30 e0       	ldi	r19, 0x00	; 0
 576:	ae 01       	movw	r20, r28
 578:	4f 5f       	subi	r20, 0xFF	; 255
 57a:	5f 4f       	sbci	r21, 0xFF	; 255
 57c:	62 e0       	ldi	r22, 0x02	; 2
 57e:	c8 01       	movw	r24, r16
 580:	0e 94 39 01 	call	0x272	; 0x272 <nRF24L01_write_register>
 584:	0f 90       	pop	r0
 586:	df 91       	pop	r29
 588:	cf 91       	pop	r28
 58a:	1f 91       	pop	r17
 58c:	0f 91       	pop	r16
 58e:	ff 90       	pop	r15
 590:	08 95       	ret

00000592 <nRF24L01_clear_receive_interrupt>:
void nRF24L01_clear_transmit_interrupts(nRF24L01 *rf) {
    uint8_t data = _BV(TX_DS) | _BV(MAX_RT);
    nRF24L01_write_register(rf, STATUS, &data, 1);
}

void nRF24L01_clear_receive_interrupt(nRF24L01 *rf) {
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	1f 92       	push	r1
 598:	cd b7       	in	r28, 0x3d	; 61
 59a:	de b7       	in	r29, 0x3e	; 62
 59c:	fc 01       	movw	r30, r24
    uint8_t data = _BV(RX_DR) | rf->status;
 59e:	97 85       	ldd	r25, Z+15	; 0x0f
 5a0:	90 64       	ori	r25, 0x40	; 64
 5a2:	99 83       	std	Y+1, r25	; 0x01
    nRF24L01_write_register(rf, STATUS, &data, 1);
 5a4:	21 e0       	ldi	r18, 0x01	; 1
 5a6:	30 e0       	ldi	r19, 0x00	; 0
 5a8:	ae 01       	movw	r20, r28
 5aa:	4f 5f       	subi	r20, 0xFF	; 255
 5ac:	5f 4f       	sbci	r21, 0xFF	; 255
 5ae:	67 e0       	ldi	r22, 0x07	; 7
 5b0:	cf 01       	movw	r24, r30
 5b2:	0e 94 39 01 	call	0x272	; 0x272 <nRF24L01_write_register>
}
 5b6:	0f 90       	pop	r0
 5b8:	df 91       	pop	r29
 5ba:	cf 91       	pop	r28
 5bc:	08 95       	ret

000005be <nRF24L01_read_received_data>:
    nRF24L01_write_register(rf, EN_RXADDR, &current_pipes, 1);

    set_high(rf->ce);
}

bool nRF24L01_read_received_data(nRF24L01 *rf, nRF24L01Message *message) {
 5be:	0f 93       	push	r16
 5c0:	1f 93       	push	r17
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	8c 01       	movw	r16, r24
 5c8:	eb 01       	movw	r28, r22
    message->pipe_number = nRF24L01_pipe_number_received(rf);
 5ca:	0e 94 a3 01 	call	0x346	; 0x346 <nRF24L01_pipe_number_received>
 5ce:	99 83       	std	Y+1, r25	; 0x01
 5d0:	88 83       	st	Y, r24
    nRF24L01_clear_receive_interrupt(rf);
 5d2:	c8 01       	movw	r24, r16
 5d4:	0e 94 c9 02 	call	0x592	; 0x592 <nRF24L01_clear_receive_interrupt>
    if (message->pipe_number < 0) {
 5d8:	88 81       	ld	r24, Y
 5da:	99 81       	ldd	r25, Y+1	; 0x01
 5dc:	99 23       	and	r25, r25
 5de:	1c f4       	brge	.+6      	; 0x5e6 <nRF24L01_read_received_data+0x28>
        message->length = 0;
 5e0:	1a a2       	std	Y+34, r1	; 0x22
        return false;
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	17 c0       	rjmp	.+46     	; 0x614 <nRF24L01_read_received_data+0x56>
    }

    nRF24L01_read_register(rf, R_RX_PL_WID, &message->length, 1);
 5e6:	21 e0       	ldi	r18, 0x01	; 1
 5e8:	30 e0       	ldi	r19, 0x00	; 0
 5ea:	ae 01       	movw	r20, r28
 5ec:	4e 5d       	subi	r20, 0xDE	; 222
 5ee:	5f 4f       	sbci	r21, 0xFF	; 255
 5f0:	60 e6       	ldi	r22, 0x60	; 96
 5f2:	c8 01       	movw	r24, r16
 5f4:	0e 94 3d 01 	call	0x27a	; 0x27a <nRF24L01_read_register>

    if (message->length > 0) {
 5f8:	2a a1       	ldd	r18, Y+34	; 0x22
 5fa:	22 23       	and	r18, r18
 5fc:	51 f0       	breq	.+20     	; 0x612 <nRF24L01_read_received_data+0x54>
        nRF24L01_send_command(rf, R_RX_PAYLOAD, &message->data,
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	ae 01       	movw	r20, r28
 602:	4e 5f       	subi	r20, 0xFE	; 254
 604:	5f 4f       	sbci	r21, 0xFF	; 255
 606:	61 e6       	ldi	r22, 0x61	; 97
 608:	c8 01       	movw	r24, r16
 60a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <nRF24L01_send_command>
            message->length);
    }

    return true;
 60e:	81 e0       	ldi	r24, 0x01	; 1
 610:	01 c0       	rjmp	.+2      	; 0x614 <nRF24L01_read_received_data+0x56>
 612:	81 e0       	ldi	r24, 0x01	; 1
}
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	1f 91       	pop	r17
 61a:	0f 91       	pop	r16
 61c:	08 95       	ret

0000061e <malloc>:
 61e:	0f 93       	push	r16
 620:	1f 93       	push	r17
 622:	cf 93       	push	r28
 624:	df 93       	push	r29
 626:	82 30       	cpi	r24, 0x02	; 2
 628:	91 05       	cpc	r25, r1
 62a:	10 f4       	brcc	.+4      	; 0x630 <malloc+0x12>
 62c:	82 e0       	ldi	r24, 0x02	; 2
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	e0 91 15 01 	lds	r30, 0x0115	; 0x800115 <__flp>
 634:	f0 91 16 01 	lds	r31, 0x0116	; 0x800116 <__flp+0x1>
 638:	20 e0       	ldi	r18, 0x00	; 0
 63a:	30 e0       	ldi	r19, 0x00	; 0
 63c:	a0 e0       	ldi	r26, 0x00	; 0
 63e:	b0 e0       	ldi	r27, 0x00	; 0
 640:	30 97       	sbiw	r30, 0x00	; 0
 642:	19 f1       	breq	.+70     	; 0x68a <malloc+0x6c>
 644:	40 81       	ld	r20, Z
 646:	51 81       	ldd	r21, Z+1	; 0x01
 648:	02 81       	ldd	r16, Z+2	; 0x02
 64a:	13 81       	ldd	r17, Z+3	; 0x03
 64c:	48 17       	cp	r20, r24
 64e:	59 07       	cpc	r21, r25
 650:	c8 f0       	brcs	.+50     	; 0x684 <malloc+0x66>
 652:	84 17       	cp	r24, r20
 654:	95 07       	cpc	r25, r21
 656:	69 f4       	brne	.+26     	; 0x672 <malloc+0x54>
 658:	10 97       	sbiw	r26, 0x00	; 0
 65a:	31 f0       	breq	.+12     	; 0x668 <malloc+0x4a>
 65c:	12 96       	adiw	r26, 0x02	; 2
 65e:	0c 93       	st	X, r16
 660:	12 97       	sbiw	r26, 0x02	; 2
 662:	13 96       	adiw	r26, 0x03	; 3
 664:	1c 93       	st	X, r17
 666:	27 c0       	rjmp	.+78     	; 0x6b6 <malloc+0x98>
 668:	00 93 15 01 	sts	0x0115, r16	; 0x800115 <__flp>
 66c:	10 93 16 01 	sts	0x0116, r17	; 0x800116 <__flp+0x1>
 670:	22 c0       	rjmp	.+68     	; 0x6b6 <malloc+0x98>
 672:	21 15       	cp	r18, r1
 674:	31 05       	cpc	r19, r1
 676:	19 f0       	breq	.+6      	; 0x67e <malloc+0x60>
 678:	42 17       	cp	r20, r18
 67a:	53 07       	cpc	r21, r19
 67c:	18 f4       	brcc	.+6      	; 0x684 <malloc+0x66>
 67e:	9a 01       	movw	r18, r20
 680:	bd 01       	movw	r22, r26
 682:	ef 01       	movw	r28, r30
 684:	df 01       	movw	r26, r30
 686:	f8 01       	movw	r30, r16
 688:	db cf       	rjmp	.-74     	; 0x640 <malloc+0x22>
 68a:	21 15       	cp	r18, r1
 68c:	31 05       	cpc	r19, r1
 68e:	f9 f0       	breq	.+62     	; 0x6ce <malloc+0xb0>
 690:	28 1b       	sub	r18, r24
 692:	39 0b       	sbc	r19, r25
 694:	24 30       	cpi	r18, 0x04	; 4
 696:	31 05       	cpc	r19, r1
 698:	80 f4       	brcc	.+32     	; 0x6ba <malloc+0x9c>
 69a:	8a 81       	ldd	r24, Y+2	; 0x02
 69c:	9b 81       	ldd	r25, Y+3	; 0x03
 69e:	61 15       	cp	r22, r1
 6a0:	71 05       	cpc	r23, r1
 6a2:	21 f0       	breq	.+8      	; 0x6ac <malloc+0x8e>
 6a4:	fb 01       	movw	r30, r22
 6a6:	93 83       	std	Z+3, r25	; 0x03
 6a8:	82 83       	std	Z+2, r24	; 0x02
 6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <malloc+0x96>
 6ac:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <__flp+0x1>
 6b0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <__flp>
 6b4:	fe 01       	movw	r30, r28
 6b6:	32 96       	adiw	r30, 0x02	; 2
 6b8:	44 c0       	rjmp	.+136    	; 0x742 <malloc+0x124>
 6ba:	fe 01       	movw	r30, r28
 6bc:	e2 0f       	add	r30, r18
 6be:	f3 1f       	adc	r31, r19
 6c0:	81 93       	st	Z+, r24
 6c2:	91 93       	st	Z+, r25
 6c4:	22 50       	subi	r18, 0x02	; 2
 6c6:	31 09       	sbc	r19, r1
 6c8:	39 83       	std	Y+1, r19	; 0x01
 6ca:	28 83       	st	Y, r18
 6cc:	3a c0       	rjmp	.+116    	; 0x742 <malloc+0x124>
 6ce:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <__brkval>
 6d2:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <__brkval+0x1>
 6d6:	23 2b       	or	r18, r19
 6d8:	41 f4       	brne	.+16     	; 0x6ea <malloc+0xcc>
 6da:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
 6de:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
 6e2:	30 93 14 01 	sts	0x0114, r19	; 0x800114 <__brkval+0x1>
 6e6:	20 93 13 01 	sts	0x0113, r18	; 0x800113 <__brkval>
 6ea:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 6ee:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 6f2:	21 15       	cp	r18, r1
 6f4:	31 05       	cpc	r19, r1
 6f6:	41 f4       	brne	.+16     	; 0x708 <malloc+0xea>
 6f8:	2d b7       	in	r18, 0x3d	; 61
 6fa:	3e b7       	in	r19, 0x3e	; 62
 6fc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
 700:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
 704:	24 1b       	sub	r18, r20
 706:	35 0b       	sbc	r19, r21
 708:	e0 91 13 01 	lds	r30, 0x0113	; 0x800113 <__brkval>
 70c:	f0 91 14 01 	lds	r31, 0x0114	; 0x800114 <__brkval+0x1>
 710:	e2 17       	cp	r30, r18
 712:	f3 07       	cpc	r31, r19
 714:	a0 f4       	brcc	.+40     	; 0x73e <malloc+0x120>
 716:	2e 1b       	sub	r18, r30
 718:	3f 0b       	sbc	r19, r31
 71a:	28 17       	cp	r18, r24
 71c:	39 07       	cpc	r19, r25
 71e:	78 f0       	brcs	.+30     	; 0x73e <malloc+0x120>
 720:	ac 01       	movw	r20, r24
 722:	4e 5f       	subi	r20, 0xFE	; 254
 724:	5f 4f       	sbci	r21, 0xFF	; 255
 726:	24 17       	cp	r18, r20
 728:	35 07       	cpc	r19, r21
 72a:	48 f0       	brcs	.+18     	; 0x73e <malloc+0x120>
 72c:	4e 0f       	add	r20, r30
 72e:	5f 1f       	adc	r21, r31
 730:	50 93 14 01 	sts	0x0114, r21	; 0x800114 <__brkval+0x1>
 734:	40 93 13 01 	sts	0x0113, r20	; 0x800113 <__brkval>
 738:	81 93       	st	Z+, r24
 73a:	91 93       	st	Z+, r25
 73c:	02 c0       	rjmp	.+4      	; 0x742 <malloc+0x124>
 73e:	e0 e0       	ldi	r30, 0x00	; 0
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	cf 01       	movw	r24, r30
 744:	df 91       	pop	r29
 746:	cf 91       	pop	r28
 748:	1f 91       	pop	r17
 74a:	0f 91       	pop	r16
 74c:	08 95       	ret

0000074e <free>:
 74e:	cf 93       	push	r28
 750:	df 93       	push	r29
 752:	00 97       	sbiw	r24, 0x00	; 0
 754:	09 f4       	brne	.+2      	; 0x758 <free+0xa>
 756:	81 c0       	rjmp	.+258    	; 0x85a <free+0x10c>
 758:	fc 01       	movw	r30, r24
 75a:	32 97       	sbiw	r30, 0x02	; 2
 75c:	13 82       	std	Z+3, r1	; 0x03
 75e:	12 82       	std	Z+2, r1	; 0x02
 760:	a0 91 15 01 	lds	r26, 0x0115	; 0x800115 <__flp>
 764:	b0 91 16 01 	lds	r27, 0x0116	; 0x800116 <__flp+0x1>
 768:	10 97       	sbiw	r26, 0x00	; 0
 76a:	81 f4       	brne	.+32     	; 0x78c <free+0x3e>
 76c:	20 81       	ld	r18, Z
 76e:	31 81       	ldd	r19, Z+1	; 0x01
 770:	82 0f       	add	r24, r18
 772:	93 1f       	adc	r25, r19
 774:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <__brkval>
 778:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <__brkval+0x1>
 77c:	28 17       	cp	r18, r24
 77e:	39 07       	cpc	r19, r25
 780:	51 f5       	brne	.+84     	; 0x7d6 <free+0x88>
 782:	f0 93 14 01 	sts	0x0114, r31	; 0x800114 <__brkval+0x1>
 786:	e0 93 13 01 	sts	0x0113, r30	; 0x800113 <__brkval>
 78a:	67 c0       	rjmp	.+206    	; 0x85a <free+0x10c>
 78c:	ed 01       	movw	r28, r26
 78e:	20 e0       	ldi	r18, 0x00	; 0
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	ce 17       	cp	r28, r30
 794:	df 07       	cpc	r29, r31
 796:	40 f4       	brcc	.+16     	; 0x7a8 <free+0x5a>
 798:	4a 81       	ldd	r20, Y+2	; 0x02
 79a:	5b 81       	ldd	r21, Y+3	; 0x03
 79c:	9e 01       	movw	r18, r28
 79e:	41 15       	cp	r20, r1
 7a0:	51 05       	cpc	r21, r1
 7a2:	f1 f0       	breq	.+60     	; 0x7e0 <free+0x92>
 7a4:	ea 01       	movw	r28, r20
 7a6:	f5 cf       	rjmp	.-22     	; 0x792 <free+0x44>
 7a8:	d3 83       	std	Z+3, r29	; 0x03
 7aa:	c2 83       	std	Z+2, r28	; 0x02
 7ac:	40 81       	ld	r20, Z
 7ae:	51 81       	ldd	r21, Z+1	; 0x01
 7b0:	84 0f       	add	r24, r20
 7b2:	95 1f       	adc	r25, r21
 7b4:	c8 17       	cp	r28, r24
 7b6:	d9 07       	cpc	r29, r25
 7b8:	59 f4       	brne	.+22     	; 0x7d0 <free+0x82>
 7ba:	88 81       	ld	r24, Y
 7bc:	99 81       	ldd	r25, Y+1	; 0x01
 7be:	84 0f       	add	r24, r20
 7c0:	95 1f       	adc	r25, r21
 7c2:	02 96       	adiw	r24, 0x02	; 2
 7c4:	91 83       	std	Z+1, r25	; 0x01
 7c6:	80 83       	st	Z, r24
 7c8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ca:	9b 81       	ldd	r25, Y+3	; 0x03
 7cc:	93 83       	std	Z+3, r25	; 0x03
 7ce:	82 83       	std	Z+2, r24	; 0x02
 7d0:	21 15       	cp	r18, r1
 7d2:	31 05       	cpc	r19, r1
 7d4:	29 f4       	brne	.+10     	; 0x7e0 <free+0x92>
 7d6:	f0 93 16 01 	sts	0x0116, r31	; 0x800116 <__flp+0x1>
 7da:	e0 93 15 01 	sts	0x0115, r30	; 0x800115 <__flp>
 7de:	3d c0       	rjmp	.+122    	; 0x85a <free+0x10c>
 7e0:	e9 01       	movw	r28, r18
 7e2:	fb 83       	std	Y+3, r31	; 0x03
 7e4:	ea 83       	std	Y+2, r30	; 0x02
 7e6:	49 91       	ld	r20, Y+
 7e8:	59 91       	ld	r21, Y+
 7ea:	c4 0f       	add	r28, r20
 7ec:	d5 1f       	adc	r29, r21
 7ee:	ec 17       	cp	r30, r28
 7f0:	fd 07       	cpc	r31, r29
 7f2:	61 f4       	brne	.+24     	; 0x80c <free+0xbe>
 7f4:	80 81       	ld	r24, Z
 7f6:	91 81       	ldd	r25, Z+1	; 0x01
 7f8:	84 0f       	add	r24, r20
 7fa:	95 1f       	adc	r25, r21
 7fc:	02 96       	adiw	r24, 0x02	; 2
 7fe:	e9 01       	movw	r28, r18
 800:	99 83       	std	Y+1, r25	; 0x01
 802:	88 83       	st	Y, r24
 804:	82 81       	ldd	r24, Z+2	; 0x02
 806:	93 81       	ldd	r25, Z+3	; 0x03
 808:	9b 83       	std	Y+3, r25	; 0x03
 80a:	8a 83       	std	Y+2, r24	; 0x02
 80c:	e0 e0       	ldi	r30, 0x00	; 0
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	12 96       	adiw	r26, 0x02	; 2
 812:	8d 91       	ld	r24, X+
 814:	9c 91       	ld	r25, X
 816:	13 97       	sbiw	r26, 0x03	; 3
 818:	00 97       	sbiw	r24, 0x00	; 0
 81a:	19 f0       	breq	.+6      	; 0x822 <free+0xd4>
 81c:	fd 01       	movw	r30, r26
 81e:	dc 01       	movw	r26, r24
 820:	f7 cf       	rjmp	.-18     	; 0x810 <free+0xc2>
 822:	8d 91       	ld	r24, X+
 824:	9c 91       	ld	r25, X
 826:	11 97       	sbiw	r26, 0x01	; 1
 828:	9d 01       	movw	r18, r26
 82a:	2e 5f       	subi	r18, 0xFE	; 254
 82c:	3f 4f       	sbci	r19, 0xFF	; 255
 82e:	82 0f       	add	r24, r18
 830:	93 1f       	adc	r25, r19
 832:	20 91 13 01 	lds	r18, 0x0113	; 0x800113 <__brkval>
 836:	30 91 14 01 	lds	r19, 0x0114	; 0x800114 <__brkval+0x1>
 83a:	28 17       	cp	r18, r24
 83c:	39 07       	cpc	r19, r25
 83e:	69 f4       	brne	.+26     	; 0x85a <free+0x10c>
 840:	30 97       	sbiw	r30, 0x00	; 0
 842:	29 f4       	brne	.+10     	; 0x84e <free+0x100>
 844:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <__flp+0x1>
 848:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <__flp>
 84c:	02 c0       	rjmp	.+4      	; 0x852 <free+0x104>
 84e:	13 82       	std	Z+3, r1	; 0x03
 850:	12 82       	std	Z+2, r1	; 0x02
 852:	b0 93 14 01 	sts	0x0114, r27	; 0x800114 <__brkval+0x1>
 856:	a0 93 13 01 	sts	0x0113, r26	; 0x800113 <__brkval>
 85a:	df 91       	pop	r29
 85c:	cf 91       	pop	r28
 85e:	08 95       	ret

00000860 <strcmp>:
 860:	fb 01       	movw	r30, r22
 862:	dc 01       	movw	r26, r24
 864:	8d 91       	ld	r24, X+
 866:	01 90       	ld	r0, Z+
 868:	80 19       	sub	r24, r0
 86a:	01 10       	cpse	r0, r1
 86c:	d9 f3       	breq	.-10     	; 0x864 <strcmp+0x4>
 86e:	99 0b       	sbc	r25, r25
 870:	08 95       	ret

00000872 <_exit>:
 872:	f8 94       	cli

00000874 <__stop_program>:
 874:	ff cf       	rjmp	.-2      	; 0x874 <__stop_program>
