
NRF24L01_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000009f2  00000a86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000009f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080012e  0080012e  00000ab4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ae4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a59  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1b  00000000  00000000  0000271d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e4a  00000000  00000000  00003238  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000520  00000000  00000000  00004084  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000708  00000000  00000000  000045a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001b8d  00000000  00000000  00004cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  00006839  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4b 00 	jmp	0x96	; 0x96 <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	db 03       	fmulsu	r21, r19
  6a:	dd 02       	muls	r29, r29
  6c:	ed 02       	muls	r30, r29
  6e:	e9 02       	muls	r30, r25
  70:	e9 02       	muls	r30, r25
  72:	e9 02       	muls	r30, r25
  74:	e9 02       	muls	r30, r25
  76:	e9 02       	muls	r30, r25
  78:	e9 02       	muls	r30, r25
  7a:	e9 02       	muls	r30, r25
  7c:	e9 02       	muls	r30, r25
  7e:	e9 02       	muls	r30, r25
  80:	e9 02       	muls	r30, r25
  82:	f0 03       	fmuls	r23, r16
  84:	e9 02       	muls	r30, r25
  86:	e9 02       	muls	r30, r25
  88:	e9 02       	muls	r30, r25
  8a:	9b 02       	muls	r25, r27
  8c:	e9 02       	muls	r30, r25
  8e:	ed 02       	muls	r30, r29
  90:	e9 02       	muls	r30, r25
  92:	e9 02       	muls	r30, r25
  94:	b4 03       	fmuls	r19, r20

00000096 <__ctors_end>:
  96:	11 24       	eor	r1, r1
  98:	1f be       	out	0x3f, r1	; 63
  9a:	cf ef       	ldi	r28, 0xFF	; 255
  9c:	d8 e0       	ldi	r29, 0x08	; 8
  9e:	de bf       	out	0x3e, r29	; 62
  a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
  a2:	11 e0       	ldi	r17, 0x01	; 1
  a4:	a0 e0       	ldi	r26, 0x00	; 0
  a6:	b1 e0       	ldi	r27, 0x01	; 1
  a8:	e2 ef       	ldi	r30, 0xF2	; 242
  aa:	f9 e0       	ldi	r31, 0x09	; 9
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x10>
  ae:	05 90       	lpm	r0, Z+
  b0:	0d 92       	st	X+, r0
  b2:	ae 32       	cpi	r26, 0x2E	; 46
  b4:	b1 07       	cpc	r27, r17
  b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0xc>

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	ae e2       	ldi	r26, 0x2E	; 46
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a8 33       	cpi	r26, 0x38	; 56
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 4b 04 	call	0x896	; 0x896 <main>
  cc:	0c 94 f7 04 	jmp	0x9ee	; 0x9ee <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <nrf24_init>:
{
    uint8_t rv;
    nrf24_readRegister(OBSERVE_TX,&rv,1);
    rv = rv & 0x0F;
    return rv;
}
  d4:	0e 94 ae 04 	call	0x95c	; 0x95c <nrf24_setupPins>
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	0e 94 b4 04 	call	0x968	; 0x968 <nrf24_ce_digitalWrite>
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 ba 04 	call	0x974	; 0x974 <nrf24_csn_digitalWrite>
  e4:	08 95       	ret

000000e6 <spi_transfer>:
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	e8 2e       	mov	r14, r24
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	0e 94 c0 04 	call	0x980	; 0x980 <nrf24_sck_digitalWrite>
  f8:	c7 e0       	ldi	r28, 0x07	; 7
  fa:	d0 e0       	ldi	r29, 0x00	; 0
  fc:	10 e0       	ldi	r17, 0x00	; 0
  fe:	f1 2c       	mov	r15, r1
 100:	97 01       	movw	r18, r14
 102:	0c 2e       	mov	r0, r28
 104:	02 c0       	rjmp	.+4      	; 0x10a <spi_transfer+0x24>
 106:	35 95       	asr	r19
 108:	27 95       	ror	r18
 10a:	0a 94       	dec	r0
 10c:	e2 f7       	brpl	.-8      	; 0x106 <spi_transfer+0x20>
 10e:	20 ff       	sbrs	r18, 0
 110:	04 c0       	rjmp	.+8      	; 0x11a <spi_transfer+0x34>
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 c6 04 	call	0x98c	; 0x98c <nrf24_mosi_digitalWrite>
 118:	03 c0       	rjmp	.+6      	; 0x120 <spi_transfer+0x3a>
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	0e 94 c6 04 	call	0x98c	; 0x98c <nrf24_mosi_digitalWrite>
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	0e 94 c0 04 	call	0x980	; 0x980 <nrf24_sck_digitalWrite>
 126:	11 0f       	add	r17, r17
 128:	0e 94 cc 04 	call	0x998	; 0x998 <nrf24_miso_digitalRead>
 12c:	81 11       	cpse	r24, r1
 12e:	11 60       	ori	r17, 0x01	; 1
 130:	80 e0       	ldi	r24, 0x00	; 0
 132:	0e 94 c0 04 	call	0x980	; 0x980 <nrf24_sck_digitalWrite>
 136:	21 97       	sbiw	r28, 0x01	; 1
 138:	18 f7       	brcc	.-58     	; 0x100 <spi_transfer+0x1a>
 13a:	81 2f       	mov	r24, r17
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	ff 90       	pop	r15
 144:	ef 90       	pop	r14
 146:	08 95       	ret

00000148 <nrf24_getStatus>:
 148:	cf 93       	push	r28
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	0e 94 ba 04 	call	0x974	; 0x974 <nrf24_csn_digitalWrite>
 150:	8f ef       	ldi	r24, 0xFF	; 255
 152:	0e 94 73 00 	call	0xe6	; 0xe6 <spi_transfer>
 156:	c8 2f       	mov	r28, r24
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	0e 94 ba 04 	call	0x974	; 0x974 <nrf24_csn_digitalWrite>
 15e:	8c 2f       	mov	r24, r28
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <nrf24_transferSync>:
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	44 23       	and	r20, r20
 172:	a1 f0       	breq	.+40     	; 0x19c <nrf24_transferSync+0x38>
 174:	ec 01       	movw	r28, r24
 176:	06 2f       	mov	r16, r22
 178:	17 2f       	mov	r17, r23
 17a:	41 50       	subi	r20, 0x01	; 1
 17c:	e4 2e       	mov	r14, r20
 17e:	f1 2c       	mov	r15, r1
 180:	2f ef       	ldi	r18, 0xFF	; 255
 182:	e2 1a       	sub	r14, r18
 184:	f2 0a       	sbc	r15, r18
 186:	e8 0e       	add	r14, r24
 188:	f9 1e       	adc	r15, r25
 18a:	89 91       	ld	r24, Y+
 18c:	0e 94 73 00 	call	0xe6	; 0xe6 <spi_transfer>
 190:	f8 01       	movw	r30, r16
 192:	81 93       	st	Z+, r24
 194:	8f 01       	movw	r16, r30
 196:	ce 15       	cp	r28, r14
 198:	df 05       	cpc	r29, r15
 19a:	b9 f7       	brne	.-18     	; 0x18a <nrf24_transferSync+0x26>
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	ff 90       	pop	r15
 1a6:	ef 90       	pop	r14
 1a8:	08 95       	ret

000001aa <nrf24_transmitSync>:
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	66 23       	and	r22, r22
 1b4:	71 f0       	breq	.+28     	; 0x1d2 <nrf24_transmitSync+0x28>
 1b6:	ec 01       	movw	r28, r24
 1b8:	61 50       	subi	r22, 0x01	; 1
 1ba:	06 2f       	mov	r16, r22
 1bc:	10 e0       	ldi	r17, 0x00	; 0
 1be:	0f 5f       	subi	r16, 0xFF	; 255
 1c0:	1f 4f       	sbci	r17, 0xFF	; 255
 1c2:	08 0f       	add	r16, r24
 1c4:	19 1f       	adc	r17, r25
 1c6:	89 91       	ld	r24, Y+
 1c8:	0e 94 73 00 	call	0xe6	; 0xe6 <spi_transfer>
 1cc:	c0 17       	cp	r28, r16
 1ce:	d1 07       	cpc	r29, r17
 1d0:	d1 f7       	brne	.-12     	; 0x1c6 <nrf24_transmitSync+0x1c>
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	1f 91       	pop	r17
 1d8:	0f 91       	pop	r16
 1da:	08 95       	ret

000001dc <nrf24_configRegister>:
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	c8 2f       	mov	r28, r24
 1e2:	d6 2f       	mov	r29, r22
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 ba 04 	call	0x974	; 0x974 <nrf24_csn_digitalWrite>
 1ea:	8c 2f       	mov	r24, r28
 1ec:	8f 71       	andi	r24, 0x1F	; 31
 1ee:	80 62       	ori	r24, 0x20	; 32
 1f0:	0e 94 73 00 	call	0xe6	; 0xe6 <spi_transfer>
 1f4:	8d 2f       	mov	r24, r29
 1f6:	0e 94 73 00 	call	0xe6	; 0xe6 <spi_transfer>
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 ba 04 	call	0x974	; 0x974 <nrf24_csn_digitalWrite>
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <nrf24_getData>:
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	ec 01       	movw	r28, r24
 20c:	80 e0       	ldi	r24, 0x00	; 0
 20e:	0e 94 ba 04 	call	0x974	; 0x974 <nrf24_csn_digitalWrite>
 212:	81 e6       	ldi	r24, 0x61	; 97
 214:	0e 94 73 00 	call	0xe6	; 0xe6 <spi_transfer>
 218:	40 91 30 01 	lds	r20, 0x0130	; 0x800130 <payload_len>
 21c:	be 01       	movw	r22, r28
 21e:	ce 01       	movw	r24, r28
 220:	0e 94 b2 00 	call	0x164	; 0x164 <nrf24_transferSync>
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	0e 94 ba 04 	call	0x974	; 0x974 <nrf24_csn_digitalWrite>
 22a:	60 e4       	ldi	r22, 0x40	; 64
 22c:	87 e0       	ldi	r24, 0x07	; 7
 22e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <nrf24_configRegister>
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	08 95       	ret

00000238 <nrf24_powerUpRx>:
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	0e 94 ba 04 	call	0x974	; 0x974 <nrf24_csn_digitalWrite>
 23e:	82 ee       	ldi	r24, 0xE2	; 226
 240:	0e 94 73 00 	call	0xe6	; 0xe6 <spi_transfer>
 244:	81 e0       	ldi	r24, 0x01	; 1
 246:	0e 94 ba 04 	call	0x974	; 0x974 <nrf24_csn_digitalWrite>
 24a:	60 e7       	ldi	r22, 0x70	; 112
 24c:	87 e0       	ldi	r24, 0x07	; 7
 24e:	0e 94 ee 00 	call	0x1dc	; 0x1dc <nrf24_configRegister>
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 b4 04 	call	0x968	; 0x968 <nrf24_ce_digitalWrite>
 258:	6b e0       	ldi	r22, 0x0B	; 11
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	0e 94 ee 00 	call	0x1dc	; 0x1dc <nrf24_configRegister>
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 b4 04 	call	0x968	; 0x968 <nrf24_ce_digitalWrite>
 266:	08 95       	ret

00000268 <nrf24_config>:
 268:	60 93 30 01 	sts	0x0130, r22	; 0x800130 <payload_len>
 26c:	68 2f       	mov	r22, r24
 26e:	85 e0       	ldi	r24, 0x05	; 5
 270:	0e 94 ee 00 	call	0x1dc	; 0x1dc <nrf24_configRegister>
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	81 e1       	ldi	r24, 0x11	; 17
 278:	0e 94 ee 00 	call	0x1dc	; 0x1dc <nrf24_configRegister>
 27c:	60 91 30 01 	lds	r22, 0x0130	; 0x800130 <payload_len>
 280:	82 e1       	ldi	r24, 0x12	; 18
 282:	0e 94 ee 00 	call	0x1dc	; 0x1dc <nrf24_configRegister>
 286:	60 e0       	ldi	r22, 0x00	; 0
 288:	83 e1       	ldi	r24, 0x13	; 19
 28a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <nrf24_configRegister>
 28e:	60 e0       	ldi	r22, 0x00	; 0
 290:	84 e1       	ldi	r24, 0x14	; 20
 292:	0e 94 ee 00 	call	0x1dc	; 0x1dc <nrf24_configRegister>
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	85 e1       	ldi	r24, 0x15	; 21
 29a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <nrf24_configRegister>
 29e:	60 e0       	ldi	r22, 0x00	; 0
 2a0:	86 e1       	ldi	r24, 0x16	; 22
 2a2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <nrf24_configRegister>
 2a6:	66 e0       	ldi	r22, 0x06	; 6
 2a8:	86 e0       	ldi	r24, 0x06	; 6
 2aa:	0e 94 ee 00 	call	0x1dc	; 0x1dc <nrf24_configRegister>
 2ae:	68 e0       	ldi	r22, 0x08	; 8
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <nrf24_configRegister>
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 ee 00 	call	0x1dc	; 0x1dc <nrf24_configRegister>
 2be:	63 e0       	ldi	r22, 0x03	; 3
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <nrf24_configRegister>
 2c6:	6f e4       	ldi	r22, 0x4F	; 79
 2c8:	84 e0       	ldi	r24, 0x04	; 4
 2ca:	0e 94 ee 00 	call	0x1dc	; 0x1dc <nrf24_configRegister>
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	8c e1       	ldi	r24, 0x1C	; 28
 2d2:	0e 94 ee 00 	call	0x1dc	; 0x1dc <nrf24_configRegister>
 2d6:	0e 94 1c 01 	call	0x238	; 0x238 <nrf24_powerUpRx>
 2da:	08 95       	ret

000002dc <nrf24_readRegister>:
 2dc:	0f 93       	push	r16
 2de:	1f 93       	push	r17
 2e0:	cf 93       	push	r28
 2e2:	df 93       	push	r29
 2e4:	08 2f       	mov	r16, r24
 2e6:	eb 01       	movw	r28, r22
 2e8:	14 2f       	mov	r17, r20
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	0e 94 ba 04 	call	0x974	; 0x974 <nrf24_csn_digitalWrite>
 2f0:	80 2f       	mov	r24, r16
 2f2:	8f 71       	andi	r24, 0x1F	; 31
 2f4:	0e 94 73 00 	call	0xe6	; 0xe6 <spi_transfer>
 2f8:	41 2f       	mov	r20, r17
 2fa:	be 01       	movw	r22, r28
 2fc:	ce 01       	movw	r24, r28
 2fe:	0e 94 b2 00 	call	0x164	; 0x164 <nrf24_transferSync>
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	0e 94 ba 04 	call	0x974	; 0x974 <nrf24_csn_digitalWrite>
 308:	df 91       	pop	r29
 30a:	cf 91       	pop	r28
 30c:	1f 91       	pop	r17
 30e:	0f 91       	pop	r16
 310:	08 95       	ret

00000312 <nrf24_rxFifoEmpty>:
 312:	cf 93       	push	r28
 314:	df 93       	push	r29
 316:	1f 92       	push	r1
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	be 01       	movw	r22, r28
 320:	6f 5f       	subi	r22, 0xFF	; 255
 322:	7f 4f       	sbci	r23, 0xFF	; 255
 324:	87 e1       	ldi	r24, 0x17	; 23
 326:	0e 94 6e 01 	call	0x2dc	; 0x2dc <nrf24_readRegister>
 32a:	89 81       	ldd	r24, Y+1	; 0x01
 32c:	81 70       	andi	r24, 0x01	; 1
 32e:	0f 90       	pop	r0
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	08 95       	ret

00000336 <nrf24_dataReady>:
 336:	0e 94 a4 00 	call	0x148	; 0x148 <nrf24_getStatus>
 33a:	86 fd       	sbrc	r24, 6
 33c:	07 c0       	rjmp	.+14     	; 0x34c <nrf24_dataReady+0x16>
 33e:	0e 94 89 01 	call	0x312	; 0x312 <nrf24_rxFifoEmpty>
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	88 23       	and	r24, r24
 346:	19 f0       	breq	.+6      	; 0x34e <nrf24_dataReady+0x18>
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	01 c0       	rjmp	.+2      	; 0x34e <nrf24_dataReady+0x18>
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	89 2f       	mov	r24, r25
 350:	08 95       	ret

00000352 <nrf24_writeRegister>:
    nrf24_csn_digitalWrite(HIGH);
}

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
 352:	0f 93       	push	r16
 354:	1f 93       	push	r17
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	c8 2f       	mov	r28, r24
 35c:	8b 01       	movw	r16, r22
 35e:	d4 2f       	mov	r29, r20
    nrf24_csn_digitalWrite(LOW);
 360:	80 e0       	ldi	r24, 0x00	; 0
 362:	0e 94 ba 04 	call	0x974	; 0x974 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 366:	8c 2f       	mov	r24, r28
 368:	8f 71       	andi	r24, 0x1F	; 31
 36a:	80 62       	ori	r24, 0x20	; 32
 36c:	0e 94 73 00 	call	0xe6	; 0xe6 <spi_transfer>
    nrf24_transmitSync(value,len);
 370:	6d 2f       	mov	r22, r29
 372:	c8 01       	movw	r24, r16
 374:	0e 94 d5 00 	call	0x1aa	; 0x1aa <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	0e 94 ba 04 	call	0x974	; 0x974 <nrf24_csn_digitalWrite>
}
 37e:	df 91       	pop	r29
 380:	cf 91       	pop	r28
 382:	1f 91       	pop	r17
 384:	0f 91       	pop	r16
 386:	08 95       	ret

00000388 <nrf24_rx_address>:
    nrf24_powerUpRx();
}

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
 388:	cf 93       	push	r28
 38a:	df 93       	push	r29
 38c:	ec 01       	movw	r28, r24
    nrf24_ce_digitalWrite(LOW);
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	0e 94 b4 04 	call	0x968	; 0x968 <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 394:	45 e0       	ldi	r20, 0x05	; 5
 396:	be 01       	movw	r22, r28
 398:	8b e0       	ldi	r24, 0x0B	; 11
 39a:	0e 94 a9 01 	call	0x352	; 0x352 <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	0e 94 b4 04 	call	0x968	; 0x968 <nrf24_ce_digitalWrite>
}
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	08 95       	ret

000003aa <nrf24_tx_address>:
    return payload_len;
}

/* Set the TX address */
void nrf24_tx_address(uint8_t* adr)
{
 3aa:	cf 93       	push	r28
 3ac:	df 93       	push	r29
 3ae:	ec 01       	movw	r28, r24
    /* RX_ADDR_P0 must be set to the sending addr for auto ack to work. */
    nrf24_writeRegister(RX_ADDR_P0,adr,nrf24_ADDR_LEN);
 3b0:	45 e0       	ldi	r20, 0x05	; 5
 3b2:	bc 01       	movw	r22, r24
 3b4:	8a e0       	ldi	r24, 0x0A	; 10
 3b6:	0e 94 a9 01 	call	0x352	; 0x352 <nrf24_writeRegister>
    nrf24_writeRegister(TX_ADDR,adr,nrf24_ADDR_LEN);
 3ba:	45 e0       	ldi	r20, 0x05	; 5
 3bc:	be 01       	movw	r22, r28
 3be:	80 e1       	ldi	r24, 0x10	; 16
 3c0:	0e 94 a9 01 	call	0x352	; 0x352 <nrf24_writeRegister>
}
 3c4:	df 91       	pop	r29
 3c6:	cf 91       	pop	r28
 3c8:	08 95       	ret

000003ca <xputc>:
	pf = xfunc_out;		/* Save current output device */
	xfunc_out = func;	/* Switch output to specified device */
	while (*str)		/* Put the string */
		xputc(*str++);
	xfunc_out = pf;		/* Restore output device */
}
 3ca:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <__data_end>
 3ce:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <__data_end+0x1>
 3d2:	30 97       	sbiw	r30, 0x00	; 0
 3d4:	49 f0       	breq	.+18     	; 0x3e8 <xputc+0x1e>
 3d6:	9f 01       	movw	r18, r30
 3d8:	2f 5f       	subi	r18, 0xFF	; 255
 3da:	3f 4f       	sbci	r19, 0xFF	; 255
 3dc:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <__data_end+0x1>
 3e0:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <__data_end>
 3e4:	80 83       	st	Z, r24
 3e6:	08 95       	ret
 3e8:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <xfunc_out>
 3ec:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <xfunc_out+0x1>
 3f0:	30 97       	sbiw	r30, 0x00	; 0
 3f2:	09 f0       	breq	.+2      	; 0x3f6 <xputc+0x2c>
 3f4:	09 95       	icall
 3f6:	08 95       	ret

000003f8 <xputs>:
 3f8:	cf 93       	push	r28
 3fa:	df 93       	push	r29
 3fc:	ec 01       	movw	r28, r24
 3fe:	88 81       	ld	r24, Y
 400:	88 23       	and	r24, r24
 402:	31 f0       	breq	.+12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 404:	21 96       	adiw	r28, 0x01	; 1
 406:	0e 94 e5 01 	call	0x3ca	; 0x3ca <xputc>
 40a:	89 91       	ld	r24, Y+
 40c:	81 11       	cpse	r24, r1
 40e:	fb cf       	rjmp	.-10     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 410:	df 91       	pop	r29
 412:	cf 91       	pop	r28
 414:	08 95       	ret

00000416 <xvprintf>:
 416:	2f 92       	push	r2
 418:	3f 92       	push	r3
 41a:	4f 92       	push	r4
 41c:	5f 92       	push	r5
 41e:	6f 92       	push	r6
 420:	7f 92       	push	r7
 422:	8f 92       	push	r8
 424:	9f 92       	push	r9
 426:	af 92       	push	r10
 428:	bf 92       	push	r11
 42a:	cf 92       	push	r12
 42c:	df 92       	push	r13
 42e:	ef 92       	push	r14
 430:	ff 92       	push	r15
 432:	0f 93       	push	r16
 434:	1f 93       	push	r17
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	cd b7       	in	r28, 0x3d	; 61
 43c:	de b7       	in	r29, 0x3e	; 62
 43e:	64 97       	sbiw	r28, 0x14	; 20
 440:	0f b6       	in	r0, 0x3f	; 63
 442:	f8 94       	cli
 444:	de bf       	out	0x3e, r29	; 62
 446:	0f be       	out	0x3f, r0	; 63
 448:	cd bf       	out	0x3d, r28	; 61
 44a:	1c 01       	movw	r2, r24
 44c:	7a 8b       	std	Y+18, r23	; 0x12
 44e:	69 8b       	std	Y+17, r22	; 0x11
 450:	02 c0       	rjmp	.+4      	; 0x456 <xvprintf+0x40>
 452:	ba 8a       	std	Y+18, r11	; 0x12
 454:	a9 8a       	std	Y+17, r10	; 0x11
 456:	d1 01       	movw	r26, r2
 458:	8c 91       	ld	r24, X
 45a:	88 23       	and	r24, r24
 45c:	09 f4       	brne	.+2      	; 0x460 <xvprintf+0x4a>
 45e:	c7 c1       	rjmp	.+910    	; 0x7ee <xvprintf+0x3d8>
 460:	85 32       	cpi	r24, 0x25	; 37
 462:	31 f0       	breq	.+12     	; 0x470 <xvprintf+0x5a>
 464:	bf ef       	ldi	r27, 0xFF	; 255
 466:	2b 1a       	sub	r2, r27
 468:	3b 0a       	sbc	r3, r27
 46a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <xputc>
 46e:	f3 cf       	rjmp	.-26     	; 0x456 <xvprintf+0x40>
 470:	f1 01       	movw	r30, r2
 472:	b1 81       	ldd	r27, Z+1	; 0x01
 474:	b0 33       	cpi	r27, 0x30	; 48
 476:	49 f4       	brne	.+18     	; 0x48a <xvprintf+0x74>
 478:	b2 81       	ldd	r27, Z+2	; 0x02
 47a:	91 01       	movw	r18, r2
 47c:	2d 5f       	subi	r18, 0xFD	; 253
 47e:	3f 4f       	sbci	r19, 0xFF	; 255
 480:	19 01       	movw	r2, r18
 482:	ee 24       	eor	r14, r14
 484:	e3 94       	inc	r14
 486:	f1 2c       	mov	r15, r1
 488:	12 c0       	rjmp	.+36     	; 0x4ae <xvprintf+0x98>
 48a:	bd 32       	cpi	r27, 0x2D	; 45
 48c:	31 f0       	breq	.+12     	; 0x49a <xvprintf+0x84>
 48e:	32 e0       	ldi	r19, 0x02	; 2
 490:	23 0e       	add	r2, r19
 492:	31 1c       	adc	r3, r1
 494:	e1 2c       	mov	r14, r1
 496:	f1 2c       	mov	r15, r1
 498:	0a c0       	rjmp	.+20     	; 0x4ae <xvprintf+0x98>
 49a:	f1 01       	movw	r30, r2
 49c:	b2 81       	ldd	r27, Z+2	; 0x02
 49e:	91 01       	movw	r18, r2
 4a0:	2d 5f       	subi	r18, 0xFD	; 253
 4a2:	3f 4f       	sbci	r19, 0xFF	; 255
 4a4:	19 01       	movw	r2, r18
 4a6:	68 94       	set
 4a8:	ee 24       	eor	r14, r14
 4aa:	e1 f8       	bld	r14, 1
 4ac:	f1 2c       	mov	r15, r1
 4ae:	90 ed       	ldi	r25, 0xD0	; 208
 4b0:	9b 0f       	add	r25, r27
 4b2:	9a 30       	cpi	r25, 0x0A	; 10
 4b4:	e0 f4       	brcc	.+56     	; 0x4ee <xvprintf+0xd8>
 4b6:	00 e0       	ldi	r16, 0x00	; 0
 4b8:	10 e0       	ldi	r17, 0x00	; 0
 4ba:	c8 01       	movw	r24, r16
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	00 0f       	add	r16, r16
 4c2:	11 1f       	adc	r17, r17
 4c4:	00 0f       	add	r16, r16
 4c6:	11 1f       	adc	r17, r17
 4c8:	00 0f       	add	r16, r16
 4ca:	11 1f       	adc	r17, r17
 4cc:	08 0f       	add	r16, r24
 4ce:	19 1f       	adc	r17, r25
 4d0:	0b 0f       	add	r16, r27
 4d2:	11 1d       	adc	r17, r1
 4d4:	00 53       	subi	r16, 0x30	; 48
 4d6:	11 09       	sbc	r17, r1
 4d8:	3f ef       	ldi	r19, 0xFF	; 255
 4da:	23 1a       	sub	r2, r19
 4dc:	33 0a       	sbc	r3, r19
 4de:	f1 01       	movw	r30, r2
 4e0:	31 97       	sbiw	r30, 0x01	; 1
 4e2:	b0 81       	ld	r27, Z
 4e4:	80 ed       	ldi	r24, 0xD0	; 208
 4e6:	8b 0f       	add	r24, r27
 4e8:	8a 30       	cpi	r24, 0x0A	; 10
 4ea:	38 f3       	brcs	.-50     	; 0x4ba <xvprintf+0xa4>
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <xvprintf+0xdc>
 4ee:	00 e0       	ldi	r16, 0x00	; 0
 4f0:	10 e0       	ldi	r17, 0x00	; 0
 4f2:	9b 2f       	mov	r25, r27
 4f4:	9f 7d       	andi	r25, 0xDF	; 223
 4f6:	9c 34       	cpi	r25, 0x4C	; 76
 4f8:	41 f4       	brne	.+16     	; 0x50a <xvprintf+0xf4>
 4fa:	68 94       	set
 4fc:	e2 f8       	bld	r14, 2
 4fe:	f1 01       	movw	r30, r2
 500:	b0 81       	ld	r27, Z
 502:	91 01       	movw	r18, r2
 504:	2f 5f       	subi	r18, 0xFF	; 255
 506:	3f 4f       	sbci	r19, 0xFF	; 255
 508:	19 01       	movw	r2, r18
 50a:	bb 23       	and	r27, r27
 50c:	09 f4       	brne	.+2      	; 0x510 <xvprintf+0xfa>
 50e:	6f c1       	rjmp	.+734    	; 0x7ee <xvprintf+0x3d8>
 510:	b1 36       	cpi	r27, 0x61	; 97
 512:	18 f0       	brcs	.+6      	; 0x51a <xvprintf+0x104>
 514:	a0 ee       	ldi	r26, 0xE0	; 224
 516:	ab 0f       	add	r26, r27
 518:	01 c0       	rjmp	.+2      	; 0x51c <xvprintf+0x106>
 51a:	ab 2f       	mov	r26, r27
 51c:	4a 2f       	mov	r20, r26
 51e:	50 e0       	ldi	r21, 0x00	; 0
 520:	fa 01       	movw	r30, r20
 522:	e2 54       	subi	r30, 0x42	; 66
 524:	f1 09       	sbc	r31, r1
 526:	e7 31       	cpi	r30, 0x17	; 23
 528:	f1 05       	cpc	r31, r1
 52a:	08 f0       	brcs	.+2      	; 0x52e <xvprintf+0x118>
 52c:	52 c0       	rjmp	.+164    	; 0x5d2 <xvprintf+0x1bc>
 52e:	ec 5c       	subi	r30, 0xCC	; 204
 530:	ff 4f       	sbci	r31, 0xFF	; 255
 532:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__tablejump2__>
 536:	a9 88       	ldd	r10, Y+17	; 0x11
 538:	ba 88       	ldd	r11, Y+18	; 0x12
 53a:	32 e0       	ldi	r19, 0x02	; 2
 53c:	a3 0e       	add	r10, r19
 53e:	b1 1c       	adc	r11, r1
 540:	a9 89       	ldd	r26, Y+17	; 0x11
 542:	ba 89       	ldd	r27, Y+18	; 0x12
 544:	cd 90       	ld	r12, X+
 546:	dc 90       	ld	r13, X
 548:	f6 01       	movw	r30, r12
 54a:	80 81       	ld	r24, Z
 54c:	88 23       	and	r24, r24
 54e:	51 f0       	breq	.+20     	; 0x564 <xvprintf+0x14e>
 550:	31 96       	adiw	r30, 0x01	; 1
 552:	81 2c       	mov	r8, r1
 554:	91 2c       	mov	r9, r1
 556:	2f ef       	ldi	r18, 0xFF	; 255
 558:	82 1a       	sub	r8, r18
 55a:	92 0a       	sbc	r9, r18
 55c:	81 91       	ld	r24, Z+
 55e:	81 11       	cpse	r24, r1
 560:	fa cf       	rjmp	.-12     	; 0x556 <xvprintf+0x140>
 562:	02 c0       	rjmp	.+4      	; 0x568 <xvprintf+0x152>
 564:	81 2c       	mov	r8, r1
 566:	91 2c       	mov	r9, r1
 568:	e1 fc       	sbrc	r14, 1
 56a:	13 c0       	rjmp	.+38     	; 0x592 <xvprintf+0x17c>
 56c:	c4 01       	movw	r24, r8
 56e:	01 96       	adiw	r24, 0x01	; 1
 570:	80 16       	cp	r8, r16
 572:	91 06       	cpc	r9, r17
 574:	08 f4       	brcc	.+2      	; 0x578 <xvprintf+0x162>
 576:	0c c1       	rjmp	.+536    	; 0x790 <xvprintf+0x37a>
 578:	4c 01       	movw	r8, r24
 57a:	0b c0       	rjmp	.+22     	; 0x592 <xvprintf+0x17c>
 57c:	3f ef       	ldi	r19, 0xFF	; 255
 57e:	e3 1a       	sub	r14, r19
 580:	f3 0a       	sbc	r15, r19
 582:	e0 16       	cp	r14, r16
 584:	f1 06       	cpc	r15, r17
 586:	08 f4       	brcc	.+2      	; 0x58a <xvprintf+0x174>
 588:	ff c0       	rjmp	.+510    	; 0x788 <xvprintf+0x372>
 58a:	48 01       	movw	r8, r16
 58c:	4f ef       	ldi	r20, 0xFF	; 255
 58e:	84 1a       	sub	r8, r20
 590:	94 0a       	sbc	r9, r20
 592:	c6 01       	movw	r24, r12
 594:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <xputs>
 598:	80 16       	cp	r8, r16
 59a:	91 06       	cpc	r9, r17
 59c:	08 f0       	brcs	.+2      	; 0x5a0 <xvprintf+0x18a>
 59e:	59 cf       	rjmp	.-334    	; 0x452 <xvprintf+0x3c>
 5a0:	74 01       	movw	r14, r8
 5a2:	80 e2       	ldi	r24, 0x20	; 32
 5a4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <xputc>
 5a8:	5f ef       	ldi	r21, 0xFF	; 255
 5aa:	e5 1a       	sub	r14, r21
 5ac:	f5 0a       	sbc	r15, r21
 5ae:	e0 16       	cp	r14, r16
 5b0:	f1 06       	cpc	r15, r17
 5b2:	b8 f3       	brcs	.-18     	; 0x5a2 <xvprintf+0x18c>
 5b4:	ba 8a       	std	Y+18, r11	; 0x12
 5b6:	a9 8a       	std	Y+17, r10	; 0x11
 5b8:	4e cf       	rjmp	.-356    	; 0x456 <xvprintf+0x40>
 5ba:	09 89       	ldd	r16, Y+17	; 0x11
 5bc:	1a 89       	ldd	r17, Y+18	; 0x12
 5be:	0e 5f       	subi	r16, 0xFE	; 254
 5c0:	1f 4f       	sbci	r17, 0xFF	; 255
 5c2:	a9 89       	ldd	r26, Y+17	; 0x11
 5c4:	ba 89       	ldd	r27, Y+18	; 0x12
 5c6:	8c 91       	ld	r24, X
 5c8:	0e 94 e5 01 	call	0x3ca	; 0x3ca <xputc>
 5cc:	1a 8b       	std	Y+18, r17	; 0x12
 5ce:	09 8b       	std	Y+17, r16	; 0x11
 5d0:	42 cf       	rjmp	.-380    	; 0x456 <xvprintf+0x40>
 5d2:	8b 2f       	mov	r24, r27
 5d4:	0e 94 e5 01 	call	0x3ca	; 0x3ca <xputc>
 5d8:	3e cf       	rjmp	.-388    	; 0x456 <xvprintf+0x40>
 5da:	e2 fe       	sbrs	r14, 2
 5dc:	19 c0       	rjmp	.+50     	; 0x610 <xvprintf+0x1fa>
 5de:	0f 2e       	mov	r0, r31
 5e0:	fa e0       	ldi	r31, 0x0A	; 10
 5e2:	4f 2e       	mov	r4, r31
 5e4:	f0 2d       	mov	r31, r0
 5e6:	51 2c       	mov	r5, r1
 5e8:	04 c0       	rjmp	.+8      	; 0x5f2 <xvprintf+0x1dc>
 5ea:	68 94       	set
 5ec:	44 24       	eor	r4, r4
 5ee:	44 f8       	bld	r4, 4
 5f0:	51 2c       	mov	r5, r1
 5f2:	29 89       	ldd	r18, Y+17	; 0x11
 5f4:	3a 89       	ldd	r19, Y+18	; 0x12
 5f6:	2c 5f       	subi	r18, 0xFC	; 252
 5f8:	3f 4f       	sbci	r19, 0xFF	; 255
 5fa:	e9 89       	ldd	r30, Y+17	; 0x11
 5fc:	fa 89       	ldd	r31, Y+18	; 0x12
 5fe:	60 81       	ld	r22, Z
 600:	71 81       	ldd	r23, Z+1	; 0x01
 602:	82 81       	ldd	r24, Z+2	; 0x02
 604:	93 81       	ldd	r25, Z+3	; 0x03
 606:	a4 34       	cpi	r26, 0x44	; 68
 608:	09 f1       	breq	.+66     	; 0x64c <xvprintf+0x236>
 60a:	3a 8b       	std	Y+18, r19	; 0x12
 60c:	29 8b       	std	Y+17, r18	; 0x11
 60e:	2b c0       	rjmp	.+86     	; 0x666 <xvprintf+0x250>
 610:	0f 2e       	mov	r0, r31
 612:	fa e0       	ldi	r31, 0x0A	; 10
 614:	4f 2e       	mov	r4, r31
 616:	f0 2d       	mov	r31, r0
 618:	51 2c       	mov	r5, r1
 61a:	a4 34       	cpi	r26, 0x44	; 68
 61c:	61 f4       	brne	.+24     	; 0x636 <xvprintf+0x220>
 61e:	e9 89       	ldd	r30, Y+17	; 0x11
 620:	fa 89       	ldd	r31, Y+18	; 0x12
 622:	40 81       	ld	r20, Z
 624:	51 81       	ldd	r21, Z+1	; 0x01
 626:	ba 01       	movw	r22, r20
 628:	55 0f       	add	r21, r21
 62a:	88 0b       	sbc	r24, r24
 62c:	99 0b       	sbc	r25, r25
 62e:	32 96       	adiw	r30, 0x02	; 2
 630:	fa 8b       	std	Y+18, r31	; 0x12
 632:	e9 8b       	std	Y+17, r30	; 0x11
 634:	0d c0       	rjmp	.+26     	; 0x650 <xvprintf+0x23a>
 636:	e9 89       	ldd	r30, Y+17	; 0x11
 638:	fa 89       	ldd	r31, Y+18	; 0x12
 63a:	40 81       	ld	r20, Z
 63c:	51 81       	ldd	r21, Z+1	; 0x01
 63e:	ba 01       	movw	r22, r20
 640:	80 e0       	ldi	r24, 0x00	; 0
 642:	90 e0       	ldi	r25, 0x00	; 0
 644:	32 96       	adiw	r30, 0x02	; 2
 646:	fa 8b       	std	Y+18, r31	; 0x12
 648:	e9 8b       	std	Y+17, r30	; 0x11
 64a:	0d c0       	rjmp	.+26     	; 0x666 <xvprintf+0x250>
 64c:	3a 8b       	std	Y+18, r19	; 0x12
 64e:	29 8b       	std	Y+17, r18	; 0x11
 650:	99 23       	and	r25, r25
 652:	4c f4       	brge	.+18     	; 0x666 <xvprintf+0x250>
 654:	90 95       	com	r25
 656:	80 95       	com	r24
 658:	70 95       	com	r23
 65a:	61 95       	neg	r22
 65c:	7f 4f       	sbci	r23, 0xFF	; 255
 65e:	8f 4f       	sbci	r24, 0xFF	; 255
 660:	9f 4f       	sbci	r25, 0xFF	; 255
 662:	68 94       	set
 664:	e3 f8       	bld	r14, 3
 666:	b8 37       	cpi	r27, 0x78	; 120
 668:	11 f4       	brne	.+4      	; 0x66e <xvprintf+0x258>
 66a:	27 e2       	ldi	r18, 0x27	; 39
 66c:	01 c0       	rjmp	.+2      	; 0x670 <xvprintf+0x25a>
 66e:	27 e0       	ldi	r18, 0x07	; 7
 670:	ae 01       	movw	r20, r28
 672:	4f 5f       	subi	r20, 0xFF	; 255
 674:	5f 4f       	sbci	r21, 0xFF	; 255
 676:	4a 01       	movw	r8, r20
 678:	a1 2c       	mov	r10, r1
 67a:	b1 2c       	mov	r11, r1
 67c:	61 2c       	mov	r6, r1
 67e:	71 2c       	mov	r7, r1
 680:	1c 8b       	std	Y+20, r17	; 0x14
 682:	0b 8b       	std	Y+19, r16	; 0x13
 684:	12 2f       	mov	r17, r18
 686:	01 c0       	rjmp	.+2      	; 0x68a <xvprintf+0x274>
 688:	56 01       	movw	r10, r12
 68a:	a3 01       	movw	r20, r6
 68c:	92 01       	movw	r18, r4
 68e:	0e 94 cf 04 	call	0x99e	; 0x99e <__udivmodsi4>
 692:	f6 2f       	mov	r31, r22
 694:	e6 2f       	mov	r30, r22
 696:	62 2f       	mov	r22, r18
 698:	73 2f       	mov	r23, r19
 69a:	84 2f       	mov	r24, r20
 69c:	95 2f       	mov	r25, r21
 69e:	fa 30       	cpi	r31, 0x0A	; 10
 6a0:	10 f0       	brcs	.+4      	; 0x6a6 <xvprintf+0x290>
 6a2:	e1 2f       	mov	r30, r17
 6a4:	ef 0f       	add	r30, r31
 6a6:	65 01       	movw	r12, r10
 6a8:	5f ef       	ldi	r21, 0xFF	; 255
 6aa:	c5 1a       	sub	r12, r21
 6ac:	d5 0a       	sbc	r13, r21
 6ae:	e0 5d       	subi	r30, 0xD0	; 208
 6b0:	d4 01       	movw	r26, r8
 6b2:	ed 93       	st	X+, r30
 6b4:	4d 01       	movw	r8, r26
 6b6:	61 15       	cp	r22, r1
 6b8:	71 05       	cpc	r23, r1
 6ba:	81 05       	cpc	r24, r1
 6bc:	91 05       	cpc	r25, r1
 6be:	21 f0       	breq	.+8      	; 0x6c8 <xvprintf+0x2b2>
 6c0:	b0 e1       	ldi	r27, 0x10	; 16
 6c2:	cb 16       	cp	r12, r27
 6c4:	d1 04       	cpc	r13, r1
 6c6:	01 f7       	brne	.-64     	; 0x688 <xvprintf+0x272>
 6c8:	0b 89       	ldd	r16, Y+19	; 0x13
 6ca:	1c 89       	ldd	r17, Y+20	; 0x14
 6cc:	e3 fe       	sbrs	r14, 3
 6ce:	0c c0       	rjmp	.+24     	; 0x6e8 <xvprintf+0x2d2>
 6d0:	e1 e0       	ldi	r30, 0x01	; 1
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	ec 0f       	add	r30, r28
 6d6:	fd 1f       	adc	r31, r29
 6d8:	ec 0d       	add	r30, r12
 6da:	fd 1d       	adc	r31, r13
 6dc:	2d e2       	ldi	r18, 0x2D	; 45
 6de:	20 83       	st	Z, r18
 6e0:	a5 01       	movw	r20, r10
 6e2:	4e 5f       	subi	r20, 0xFE	; 254
 6e4:	5f 4f       	sbci	r21, 0xFF	; 255
 6e6:	6a 01       	movw	r12, r20
 6e8:	e0 fc       	sbrc	r14, 0
 6ea:	04 c0       	rjmp	.+8      	; 0x6f4 <xvprintf+0x2de>
 6ec:	68 94       	set
 6ee:	bb 24       	eor	r11, r11
 6f0:	b5 f8       	bld	r11, 5
 6f2:	04 c0       	rjmp	.+8      	; 0x6fc <xvprintf+0x2e6>
 6f4:	0f 2e       	mov	r0, r31
 6f6:	f0 e3       	ldi	r31, 0x30	; 48
 6f8:	bf 2e       	mov	r11, r31
 6fa:	f0 2d       	mov	r31, r0
 6fc:	e1 fc       	sbrc	r14, 1
 6fe:	13 c0       	rjmp	.+38     	; 0x726 <xvprintf+0x310>
 700:	76 01       	movw	r14, r12
 702:	5f ef       	ldi	r21, 0xFF	; 255
 704:	e5 1a       	sub	r14, r21
 706:	f5 0a       	sbc	r15, r21
 708:	c0 16       	cp	r12, r16
 70a:	d1 06       	cpc	r13, r17
 70c:	c0 f1       	brcs	.+112    	; 0x77e <xvprintf+0x368>
 70e:	0c c0       	rjmp	.+24     	; 0x728 <xvprintf+0x312>
 710:	8f ef       	ldi	r24, 0xFF	; 255
 712:	e8 1a       	sub	r14, r24
 714:	f8 0a       	sbc	r15, r24
 716:	e0 16       	cp	r14, r16
 718:	f1 06       	cpc	r15, r17
 71a:	68 f1       	brcs	.+90     	; 0x776 <xvprintf+0x360>
 71c:	78 01       	movw	r14, r16
 71e:	9f ef       	ldi	r25, 0xFF	; 255
 720:	e9 1a       	sub	r14, r25
 722:	f9 0a       	sbc	r15, r25
 724:	01 c0       	rjmp	.+2      	; 0x728 <xvprintf+0x312>
 726:	76 01       	movw	r14, r12
 728:	aa 24       	eor	r10, r10
 72a:	a3 94       	inc	r10
 72c:	b1 2c       	mov	r11, r1
 72e:	ac 0e       	add	r10, r28
 730:	bd 1e       	adc	r11, r29
 732:	ac 0c       	add	r10, r12
 734:	bd 1c       	adc	r11, r13
 736:	a1 e0       	ldi	r26, 0x01	; 1
 738:	ca 1a       	sub	r12, r26
 73a:	d1 08       	sbc	r13, r1
 73c:	f5 01       	movw	r30, r10
 73e:	82 91       	ld	r24, -Z
 740:	5f 01       	movw	r10, r30
 742:	0e 94 e5 01 	call	0x3ca	; 0x3ca <xputc>
 746:	c1 14       	cp	r12, r1
 748:	d1 04       	cpc	r13, r1
 74a:	a9 f7       	brne	.-22     	; 0x736 <xvprintf+0x320>
 74c:	e0 16       	cp	r14, r16
 74e:	f1 06       	cpc	r15, r17
 750:	08 f0       	brcs	.+2      	; 0x754 <xvprintf+0x33e>
 752:	81 ce       	rjmp	.-766    	; 0x456 <xvprintf+0x40>
 754:	80 e2       	ldi	r24, 0x20	; 32
 756:	0e 94 e5 01 	call	0x3ca	; 0x3ca <xputc>
 75a:	ff ef       	ldi	r31, 0xFF	; 255
 75c:	ef 1a       	sub	r14, r31
 75e:	ff 0a       	sbc	r15, r31
 760:	e0 16       	cp	r14, r16
 762:	f1 06       	cpc	r15, r17
 764:	b8 f3       	brcs	.-18     	; 0x754 <xvprintf+0x33e>
 766:	77 ce       	rjmp	.-786    	; 0x456 <xvprintf+0x40>
 768:	e2 fc       	sbrc	r14, 2
 76a:	3f cf       	rjmp	.-386    	; 0x5ea <xvprintf+0x1d4>
 76c:	68 94       	set
 76e:	44 24       	eor	r4, r4
 770:	44 f8       	bld	r4, 4
 772:	51 2c       	mov	r5, r1
 774:	60 cf       	rjmp	.-320    	; 0x636 <xvprintf+0x220>
 776:	8b 2d       	mov	r24, r11
 778:	0e 94 e5 01 	call	0x3ca	; 0x3ca <xputc>
 77c:	c9 cf       	rjmp	.-110    	; 0x710 <xvprintf+0x2fa>
 77e:	8b 2d       	mov	r24, r11
 780:	0e 94 e5 01 	call	0x3ca	; 0x3ca <xputc>
 784:	76 01       	movw	r14, r12
 786:	c4 cf       	rjmp	.-120    	; 0x710 <xvprintf+0x2fa>
 788:	80 e2       	ldi	r24, 0x20	; 32
 78a:	0e 94 e5 01 	call	0x3ca	; 0x3ca <xputc>
 78e:	f6 ce       	rjmp	.-532    	; 0x57c <xvprintf+0x166>
 790:	80 e2       	ldi	r24, 0x20	; 32
 792:	0e 94 e5 01 	call	0x3ca	; 0x3ca <xputc>
 796:	74 01       	movw	r14, r8
 798:	f1 ce       	rjmp	.-542    	; 0x57c <xvprintf+0x166>
 79a:	e9 89       	ldd	r30, Y+17	; 0x11
 79c:	fa 89       	ldd	r31, Y+18	; 0x12
 79e:	60 81       	ld	r22, Z
 7a0:	71 81       	ldd	r23, Z+1	; 0x01
 7a2:	82 81       	ldd	r24, Z+2	; 0x02
 7a4:	93 81       	ldd	r25, Z+3	; 0x03
 7a6:	34 96       	adiw	r30, 0x04	; 4
 7a8:	fa 8b       	std	Y+18, r31	; 0x12
 7aa:	e9 8b       	std	Y+17, r30	; 0x11
 7ac:	68 94       	set
 7ae:	44 24       	eor	r4, r4
 7b0:	41 f8       	bld	r4, 1
 7b2:	51 2c       	mov	r5, r1
 7b4:	58 cf       	rjmp	.-336    	; 0x666 <xvprintf+0x250>
 7b6:	e2 fc       	sbrc	r14, 2
 7b8:	f0 cf       	rjmp	.-32     	; 0x79a <xvprintf+0x384>
 7ba:	68 94       	set
 7bc:	44 24       	eor	r4, r4
 7be:	41 f8       	bld	r4, 1
 7c0:	51 2c       	mov	r5, r1
 7c2:	2b cf       	rjmp	.-426    	; 0x61a <xvprintf+0x204>
 7c4:	e9 89       	ldd	r30, Y+17	; 0x11
 7c6:	fa 89       	ldd	r31, Y+18	; 0x12
 7c8:	60 81       	ld	r22, Z
 7ca:	71 81       	ldd	r23, Z+1	; 0x01
 7cc:	82 81       	ldd	r24, Z+2	; 0x02
 7ce:	93 81       	ldd	r25, Z+3	; 0x03
 7d0:	34 96       	adiw	r30, 0x04	; 4
 7d2:	fa 8b       	std	Y+18, r31	; 0x12
 7d4:	e9 8b       	std	Y+17, r30	; 0x11
 7d6:	68 94       	set
 7d8:	44 24       	eor	r4, r4
 7da:	43 f8       	bld	r4, 3
 7dc:	51 2c       	mov	r5, r1
 7de:	43 cf       	rjmp	.-378    	; 0x666 <xvprintf+0x250>
 7e0:	e2 fc       	sbrc	r14, 2
 7e2:	f0 cf       	rjmp	.-32     	; 0x7c4 <xvprintf+0x3ae>
 7e4:	68 94       	set
 7e6:	44 24       	eor	r4, r4
 7e8:	43 f8       	bld	r4, 3
 7ea:	51 2c       	mov	r5, r1
 7ec:	24 cf       	rjmp	.-440    	; 0x636 <xvprintf+0x220>
 7ee:	64 96       	adiw	r28, 0x14	; 20
 7f0:	0f b6       	in	r0, 0x3f	; 63
 7f2:	f8 94       	cli
 7f4:	de bf       	out	0x3e, r29	; 62
 7f6:	0f be       	out	0x3f, r0	; 63
 7f8:	cd bf       	out	0x3d, r28	; 61
 7fa:	df 91       	pop	r29
 7fc:	cf 91       	pop	r28
 7fe:	1f 91       	pop	r17
 800:	0f 91       	pop	r16
 802:	ff 90       	pop	r15
 804:	ef 90       	pop	r14
 806:	df 90       	pop	r13
 808:	cf 90       	pop	r12
 80a:	bf 90       	pop	r11
 80c:	af 90       	pop	r10
 80e:	9f 90       	pop	r9
 810:	8f 90       	pop	r8
 812:	7f 90       	pop	r7
 814:	6f 90       	pop	r6
 816:	5f 90       	pop	r5
 818:	4f 90       	pop	r4
 81a:	3f 90       	pop	r3
 81c:	2f 90       	pop	r2
 81e:	08 95       	ret

00000820 <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
 820:	cf 93       	push	r28
 822:	df 93       	push	r29
 824:	cd b7       	in	r28, 0x3d	; 61
 826:	de b7       	in	r29, 0x3e	; 62
 828:	be 01       	movw	r22, r28
 82a:	6b 5f       	subi	r22, 0xFB	; 251
 82c:	7f 4f       	sbci	r23, 0xFF	; 255
 82e:	fb 01       	movw	r30, r22
 830:	81 91       	ld	r24, Z+
 832:	91 91       	ld	r25, Z+
 834:	bf 01       	movw	r22, r30
	va_list arp;


	va_start(arp, fmt);
	xvprintf(fmt, arp);
 836:	0e 94 0b 02 	call	0x416	; 0x416 <xvprintf>
	va_end(arp);
}
 83a:	df 91       	pop	r29
 83c:	cf 91       	pop	r28
 83e:	08 95       	ret

00000840 <uart_put_char>:
void uart_put_char(uint8_t tx)
{
    uint8_t i;

    /* Start condition */
    uart_clr_pin();
 840:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 842:	ef e8       	ldi	r30, 0x8F	; 143
 844:	f1 e0       	ldi	r31, 0x01	; 1
 846:	31 97       	sbiw	r30, 0x01	; 1
 848:	f1 f7       	brne	.-4      	; 0x846 <uart_put_char+0x6>
 84a:	00 c0       	rjmp	.+0      	; 0x84c <uart_put_char+0xc>
 84c:	00 00       	nop
 84e:	20 e0       	ldi	r18, 0x00	; 0
 850:	30 e0       	ldi	r19, 0x00	; 0
    uart_bit_dly();

    for(i=0;i<8;i++)
    {
        if(tx & (1<<i))
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	ac 01       	movw	r20, r24
 856:	02 2e       	mov	r0, r18
 858:	02 c0       	rjmp	.+4      	; 0x85e <uart_put_char+0x1e>
 85a:	55 95       	asr	r21
 85c:	47 95       	ror	r20
 85e:	0a 94       	dec	r0
 860:	e2 f7       	brpl	.-8      	; 0x85a <uart_put_char+0x1a>
 862:	40 ff       	sbrs	r20, 0
 864:	02 c0       	rjmp	.+4      	; 0x86a <uart_put_char+0x2a>
        {
            uart_set_pin();
 866:	2a 9a       	sbi	0x05, 2	; 5
 868:	01 c0       	rjmp	.+2      	; 0x86c <uart_put_char+0x2c>
        }
        else
        {
            uart_clr_pin();
 86a:	2a 98       	cbi	0x05, 2	; 5
 86c:	ef e8       	ldi	r30, 0x8F	; 143
 86e:	f1 e0       	ldi	r31, 0x01	; 1
 870:	31 97       	sbiw	r30, 0x01	; 1
 872:	f1 f7       	brne	.-4      	; 0x870 <uart_put_char+0x30>
 874:	00 c0       	rjmp	.+0      	; 0x876 <uart_put_char+0x36>
 876:	00 00       	nop
 878:	2f 5f       	subi	r18, 0xFF	; 255
 87a:	3f 4f       	sbci	r19, 0xFF	; 255

    /* Start condition */
    uart_clr_pin();
    uart_bit_dly();

    for(i=0;i<8;i++)
 87c:	28 30       	cpi	r18, 0x08	; 8
 87e:	31 05       	cpc	r19, r1
 880:	49 f7       	brne	.-46     	; 0x854 <uart_put_char+0x14>

        uart_bit_dly();
    }

    /* Stop condition */
    uart_set_pin();
 882:	2a 9a       	sbi	0x05, 2	; 5
 884:	8f e8       	ldi	r24, 0x8F	; 143
 886:	91 e0       	ldi	r25, 0x01	; 1
 888:	01 97       	sbiw	r24, 0x01	; 1
 88a:	f1 f7       	brne	.-4      	; 0x888 <uart_put_char+0x48>
 88c:	00 c0       	rjmp	.+0      	; 0x88e <uart_put_char+0x4e>
 88e:	00 00       	nop
 890:	08 95       	ret

00000892 <uart_init>:
/* ------------------------------------------------------------------------- */
#include "lib/xprintf.h"
/* ------------------------------------------------------------------------- */
void uart_init()
{
    uart_pin_output();
 892:	22 9a       	sbi	0x04, 2	; 4
 894:	08 95       	ret

00000896 <main>:
uint8_t rx_address[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
/* ------------------------------------------------------------------------- */
int main()
{
    /* init the software uart */
    uart_init();
 896:	0e 94 49 04 	call	0x892	; 0x892 <uart_init>

    /* init the xprintf library */
    xdev_out(uart_put_char);
 89a:	80 e2       	ldi	r24, 0x20	; 32
 89c:	94 e0       	ldi	r25, 0x04	; 4
 89e:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <xfunc_out+0x1>
 8a2:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <xfunc_out>

    /* simple greeting message */
    xprintf("\r\n> RX device ready\r\n");
 8a6:	8a e0       	ldi	r24, 0x0A	; 10
 8a8:	91 e0       	ldi	r25, 0x01	; 1
 8aa:	9f 93       	push	r25
 8ac:	8f 93       	push	r24
 8ae:	0e 94 10 04 	call	0x820	; 0x820 <xprintf>

    /* init hardware pins */
    nrf24_init();
 8b2:	0e 94 6a 00 	call	0xd4	; 0xd4 <nrf24_init>
    
    /* Channel #2 , payload length: 4 */
    nrf24_config(2,4);
 8b6:	64 e0       	ldi	r22, 0x04	; 4
 8b8:	82 e0       	ldi	r24, 0x02	; 2
 8ba:	0e 94 34 01 	call	0x268	; 0x268 <nrf24_config>
 
    /* Set the device addresses */
    nrf24_tx_address(tx_address);
 8be:	85 e0       	ldi	r24, 0x05	; 5
 8c0:	91 e0       	ldi	r25, 0x01	; 1
 8c2:	0e 94 d5 01 	call	0x3aa	; 0x3aa <nrf24_tx_address>
    nrf24_rx_address(rx_address);
 8c6:	80 e0       	ldi	r24, 0x00	; 0
 8c8:	91 e0       	ldi	r25, 0x01	; 1
 8ca:	0e 94 c4 01 	call	0x388	; 0x388 <nrf24_rx_address>
 8ce:	0f 90       	pop	r0
 8d0:	0f 90       	pop	r0
    while(1)
    {    
        if(nrf24_dataReady())
        {
            nrf24_getData(data_array);        
            xprintf("> ");
 8d2:	0f 2e       	mov	r0, r31
 8d4:	f0 e2       	ldi	r31, 0x20	; 32
 8d6:	cf 2e       	mov	r12, r31
 8d8:	f1 e0       	ldi	r31, 0x01	; 1
 8da:	df 2e       	mov	r13, r31
 8dc:	f0 2d       	mov	r31, r0
            xprintf("%2X ",data_array[0]);
 8de:	c3 e2       	ldi	r28, 0x23	; 35
 8e0:	d1 e0       	ldi	r29, 0x01	; 1
            xprintf("%2X ",data_array[1]);
            xprintf("%2X ",data_array[2]);
            xprintf("%2X\r\n",data_array[3]);
 8e2:	0f 2e       	mov	r0, r31
 8e4:	f8 e2       	ldi	r31, 0x28	; 40
 8e6:	ef 2e       	mov	r14, r31
 8e8:	f1 e0       	ldi	r31, 0x01	; 1
 8ea:	ff 2e       	mov	r15, r31
 8ec:	f0 2d       	mov	r31, r0
    nrf24_tx_address(tx_address);
    nrf24_rx_address(rx_address);

    while(1)
    {    
        if(nrf24_dataReady())
 8ee:	0e 94 9b 01 	call	0x336	; 0x336 <nrf24_dataReady>
 8f2:	88 23       	and	r24, r24
 8f4:	e1 f3       	breq	.-8      	; 0x8ee <main+0x58>
        {
            nrf24_getData(data_array);        
 8f6:	84 e3       	ldi	r24, 0x34	; 52
 8f8:	91 e0       	ldi	r25, 0x01	; 1
 8fa:	0e 94 03 01 	call	0x206	; 0x206 <nrf24_getData>
            xprintf("> ");
 8fe:	df 92       	push	r13
 900:	cf 92       	push	r12
 902:	0e 94 10 04 	call	0x820	; 0x820 <xprintf>
            xprintf("%2X ",data_array[0]);
 906:	04 e3       	ldi	r16, 0x34	; 52
 908:	11 e0       	ldi	r17, 0x01	; 1
 90a:	f8 01       	movw	r30, r16
 90c:	80 81       	ld	r24, Z
 90e:	1f 92       	push	r1
 910:	8f 93       	push	r24
 912:	df 93       	push	r29
 914:	cf 93       	push	r28
 916:	0e 94 10 04 	call	0x820	; 0x820 <xprintf>
            xprintf("%2X ",data_array[1]);
 91a:	f8 01       	movw	r30, r16
 91c:	81 81       	ldd	r24, Z+1	; 0x01
 91e:	1f 92       	push	r1
 920:	8f 93       	push	r24
 922:	df 93       	push	r29
 924:	cf 93       	push	r28
 926:	0e 94 10 04 	call	0x820	; 0x820 <xprintf>
            xprintf("%2X ",data_array[2]);
 92a:	f8 01       	movw	r30, r16
 92c:	82 81       	ldd	r24, Z+2	; 0x02
 92e:	1f 92       	push	r1
 930:	8f 93       	push	r24
 932:	df 93       	push	r29
 934:	cf 93       	push	r28
 936:	0e 94 10 04 	call	0x820	; 0x820 <xprintf>
            xprintf("%2X\r\n",data_array[3]);
 93a:	f8 01       	movw	r30, r16
 93c:	83 81       	ldd	r24, Z+3	; 0x03
 93e:	1f 92       	push	r1
 940:	8f 93       	push	r24
 942:	ff 92       	push	r15
 944:	ef 92       	push	r14
 946:	0e 94 10 04 	call	0x820	; 0x820 <xprintf>
 94a:	8d b7       	in	r24, 0x3d	; 61
 94c:	9e b7       	in	r25, 0x3e	; 62
 94e:	42 96       	adiw	r24, 0x12	; 18
 950:	0f b6       	in	r0, 0x3f	; 63
 952:	f8 94       	cli
 954:	9e bf       	out	0x3e, r25	; 62
 956:	0f be       	out	0x3f, r0	; 63
 958:	8d bf       	out	0x3d, r24	; 61
 95a:	c9 cf       	rjmp	.-110    	; 0x8ee <main+0x58>

0000095c <nrf24_setupPins>:

/* ------------------------------------------------------------------------- */

void nrf24_setupPins()
{
	set_bit(RF_DDR,0); // CE output
 95c:	38 9a       	sbi	0x07, 0	; 7
	set_bit(RF_DDR,1); // CSN output
 95e:	39 9a       	sbi	0x07, 1	; 7
	set_bit(RF_DDR,2); // SCK output
 960:	3a 9a       	sbi	0x07, 2	; 7
	set_bit(RF_DDR,3); // MOSI output
 962:	3b 9a       	sbi	0x07, 3	; 7
	clr_bit(RF_DDR,4); // MISO input
 964:	3c 98       	cbi	0x07, 4	; 7
 966:	08 95       	ret

00000968 <nrf24_ce_digitalWrite>:
}
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state)
{
	if(state)
 968:	88 23       	and	r24, r24
 96a:	11 f0       	breq	.+4      	; 0x970 <nrf24_ce_digitalWrite+0x8>
	{
		set_bit(RF_PORT,0);
 96c:	40 9a       	sbi	0x08, 0	; 8
 96e:	08 95       	ret
	}
	else
	{
		clr_bit(RF_PORT,0);
 970:	40 98       	cbi	0x08, 0	; 8
 972:	08 95       	ret

00000974 <nrf24_csn_digitalWrite>:
	}
}
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state)
{
	if(state)
 974:	88 23       	and	r24, r24
 976:	11 f0       	breq	.+4      	; 0x97c <nrf24_csn_digitalWrite+0x8>
	{
		set_bit(RF_PORT,1);
 978:	41 9a       	sbi	0x08, 1	; 8
 97a:	08 95       	ret
	}
	else
	{
		clr_bit(RF_PORT,1);
 97c:	41 98       	cbi	0x08, 1	; 8
 97e:	08 95       	ret

00000980 <nrf24_sck_digitalWrite>:
	}
}
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state)
{
	if(state)
 980:	88 23       	and	r24, r24
 982:	11 f0       	breq	.+4      	; 0x988 <nrf24_sck_digitalWrite+0x8>
	{
		set_bit(RF_PORT,2);
 984:	42 9a       	sbi	0x08, 2	; 8
 986:	08 95       	ret
	}
	else
	{
		clr_bit(RF_PORT,2);
 988:	42 98       	cbi	0x08, 2	; 8
 98a:	08 95       	ret

0000098c <nrf24_mosi_digitalWrite>:
	}
}
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state)
{
	if(state)
 98c:	88 23       	and	r24, r24
 98e:	11 f0       	breq	.+4      	; 0x994 <nrf24_mosi_digitalWrite+0x8>
	{
		set_bit(RF_PORT,3);
 990:	43 9a       	sbi	0x08, 3	; 8
 992:	08 95       	ret
	}
	else
	{
		clr_bit(RF_PORT,3);
 994:	43 98       	cbi	0x08, 3	; 8
 996:	08 95       	ret

00000998 <nrf24_miso_digitalRead>:
	}
}
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead()
{
	return check_bit(RF_PIN,4);
 998:	86 b1       	in	r24, 0x06	; 6
}
 99a:	80 71       	andi	r24, 0x10	; 16
 99c:	08 95       	ret

0000099e <__udivmodsi4>:
 99e:	a1 e2       	ldi	r26, 0x21	; 33
 9a0:	1a 2e       	mov	r1, r26
 9a2:	aa 1b       	sub	r26, r26
 9a4:	bb 1b       	sub	r27, r27
 9a6:	fd 01       	movw	r30, r26
 9a8:	0d c0       	rjmp	.+26     	; 0x9c4 <__udivmodsi4_ep>

000009aa <__udivmodsi4_loop>:
 9aa:	aa 1f       	adc	r26, r26
 9ac:	bb 1f       	adc	r27, r27
 9ae:	ee 1f       	adc	r30, r30
 9b0:	ff 1f       	adc	r31, r31
 9b2:	a2 17       	cp	r26, r18
 9b4:	b3 07       	cpc	r27, r19
 9b6:	e4 07       	cpc	r30, r20
 9b8:	f5 07       	cpc	r31, r21
 9ba:	20 f0       	brcs	.+8      	; 0x9c4 <__udivmodsi4_ep>
 9bc:	a2 1b       	sub	r26, r18
 9be:	b3 0b       	sbc	r27, r19
 9c0:	e4 0b       	sbc	r30, r20
 9c2:	f5 0b       	sbc	r31, r21

000009c4 <__udivmodsi4_ep>:
 9c4:	66 1f       	adc	r22, r22
 9c6:	77 1f       	adc	r23, r23
 9c8:	88 1f       	adc	r24, r24
 9ca:	99 1f       	adc	r25, r25
 9cc:	1a 94       	dec	r1
 9ce:	69 f7       	brne	.-38     	; 0x9aa <__udivmodsi4_loop>
 9d0:	60 95       	com	r22
 9d2:	70 95       	com	r23
 9d4:	80 95       	com	r24
 9d6:	90 95       	com	r25
 9d8:	9b 01       	movw	r18, r22
 9da:	ac 01       	movw	r20, r24
 9dc:	bd 01       	movw	r22, r26
 9de:	cf 01       	movw	r24, r30
 9e0:	08 95       	ret

000009e2 <__tablejump2__>:
 9e2:	ee 0f       	add	r30, r30
 9e4:	ff 1f       	adc	r31, r31
 9e6:	05 90       	lpm	r0, Z+
 9e8:	f4 91       	lpm	r31, Z
 9ea:	e0 2d       	mov	r30, r0
 9ec:	09 94       	ijmp

000009ee <_exit>:
 9ee:	f8 94       	cli

000009f0 <__stop_program>:
 9f0:	ff cf       	rjmp	.-2      	; 0x9f0 <__stop_program>
