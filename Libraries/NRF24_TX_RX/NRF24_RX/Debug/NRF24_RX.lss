
NRF24_RX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00000578  0000060c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000578  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000106  00800108  00800108  00000614  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000644  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000684  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001892  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aa2  00000000  00000000  000020b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b9b  00000000  00000000  00002b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  000036f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000076f  00000000  00000000  00003b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cab  00000000  00000000  00004293  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00004f3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 18 02 	jmp	0x430	; 0x430 <__vector_18>
  4c:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e7       	ldi	r30, 0x78	; 120
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 30       	cpi	r26, 0x0E	; 14
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 ba 02 	jmp	0x574	; 0x574 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

#define PAYLOAD 8
#define NRF_CH 2
#define UART_BAUD_RATE 4800

int main(){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	2d 97       	sbiw	r28, 0x0d	; 13
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61

	uint8_t nrf_buff[PAYLOAD];
	uint8_t rx_address[5] = {0xE7,0xE7,0xE7,0xE7,0xE7};
  ba:	85 e0       	ldi	r24, 0x05	; 5
  bc:	e0 e0       	ldi	r30, 0x00	; 0
  be:	f1 e0       	ldi	r31, 0x01	; 1
  c0:	de 01       	movw	r26, r28
  c2:	19 96       	adiw	r26, 0x09	; 9
  c4:	01 90       	ld	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	8a 95       	dec	r24
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x1e>
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE, F_CPU));
  cc:	8f ec       	ldi	r24, 0xCF	; 207
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <uart0_init>
	sei();
  d4:	78 94       	sei

	nrf24_init();
  d6:	0e 94 8c 00 	call	0x118	; 0x118 <nrf24_init>
	nrf24_config(NRF_CH, PAYLOAD);
  da:	68 e0       	ldi	r22, 0x08	; 8
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	0e 94 56 01 	call	0x2ac	; 0x2ac <nrf24_config>
	nrf24_rx_address(rx_address);
  e2:	ce 01       	movw	r24, r28
  e4:	09 96       	adiw	r24, 0x09	; 9
  e6:	0e 94 e6 01 	call	0x3cc	; 0x3cc <nrf24_rx_address>

	while(1){
		if(nrf24_dataReady()){
  ea:	0e 94 bd 01 	call	0x37a	; 0x37a <nrf24_dataReady>
  ee:	88 23       	and	r24, r24
  f0:	e1 f3       	breq	.-8      	; 0xea <main+0x44>

			nrf24_getData(nrf_buff);
  f2:	ce 01       	movw	r24, r28
  f4:	01 96       	adiw	r24, 0x01	; 1
  f6:	0e 94 25 01 	call	0x24a	; 0x24a <nrf24_getData>
			uart_puts(nrf_buff);
  fa:	ce 01       	movw	r24, r28
  fc:	01 96       	adiw	r24, 0x01	; 1
  fe:	0e 94 ab 02 	call	0x556	; 0x556 <uart0_puts>
			uart_puts("\r\n");
 102:	85 e0       	ldi	r24, 0x05	; 5
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	0e 94 ab 02 	call	0x556	; 0x556 <uart0_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	8f e3       	ldi	r24, 0x3F	; 63
 10c:	9c e9       	ldi	r25, 0x9C	; 156
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x68>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x6e>
 114:	00 00       	nop
 116:	e9 cf       	rjmp	.-46     	; 0xea <main+0x44>

00000118 <nrf24_init>:
{
    uint8_t rv;
    nrf24_readRegister(OBSERVE_TX,&rv,1);
    rv = rv & 0x0F;
    return rv;
}
 118:	0e 94 f7 01 	call	0x3ee	; 0x3ee <nrf24_setupPins>
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <nrf24_ce_digitalWrite>
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	0e 94 03 02 	call	0x406	; 0x406 <nrf24_csn_digitalWrite>
 128:	08 95       	ret

0000012a <spi_transfer>:
 12a:	ef 92       	push	r14
 12c:	ff 92       	push	r15
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	e8 2e       	mov	r14, r24
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	0e 94 09 02 	call	0x412	; 0x412 <nrf24_sck_digitalWrite>
 13c:	c7 e0       	ldi	r28, 0x07	; 7
 13e:	d0 e0       	ldi	r29, 0x00	; 0
 140:	10 e0       	ldi	r17, 0x00	; 0
 142:	f1 2c       	mov	r15, r1
 144:	97 01       	movw	r18, r14
 146:	0c 2e       	mov	r0, r28
 148:	02 c0       	rjmp	.+4      	; 0x14e <spi_transfer+0x24>
 14a:	35 95       	asr	r19
 14c:	27 95       	ror	r18
 14e:	0a 94       	dec	r0
 150:	e2 f7       	brpl	.-8      	; 0x14a <spi_transfer+0x20>
 152:	20 ff       	sbrs	r18, 0
 154:	04 c0       	rjmp	.+8      	; 0x15e <spi_transfer+0x34>
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 0f 02 	call	0x41e	; 0x41e <nrf24_mosi_digitalWrite>
 15c:	03 c0       	rjmp	.+6      	; 0x164 <spi_transfer+0x3a>
 15e:	80 e0       	ldi	r24, 0x00	; 0
 160:	0e 94 0f 02 	call	0x41e	; 0x41e <nrf24_mosi_digitalWrite>
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	0e 94 09 02 	call	0x412	; 0x412 <nrf24_sck_digitalWrite>
 16a:	11 0f       	add	r17, r17
 16c:	0e 94 15 02 	call	0x42a	; 0x42a <nrf24_miso_digitalRead>
 170:	81 11       	cpse	r24, r1
 172:	11 60       	ori	r17, 0x01	; 1
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	0e 94 09 02 	call	0x412	; 0x412 <nrf24_sck_digitalWrite>
 17a:	21 97       	sbiw	r28, 0x01	; 1
 17c:	18 f7       	brcc	.-58     	; 0x144 <spi_transfer+0x1a>
 17e:	81 2f       	mov	r24, r17
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	ff 90       	pop	r15
 188:	ef 90       	pop	r14
 18a:	08 95       	ret

0000018c <nrf24_getStatus>:
 18c:	cf 93       	push	r28
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	0e 94 03 02 	call	0x406	; 0x406 <nrf24_csn_digitalWrite>
 194:	8f ef       	ldi	r24, 0xFF	; 255
 196:	0e 94 95 00 	call	0x12a	; 0x12a <spi_transfer>
 19a:	c8 2f       	mov	r28, r24
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	0e 94 03 02 	call	0x406	; 0x406 <nrf24_csn_digitalWrite>
 1a2:	8c 2f       	mov	r24, r28
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <nrf24_transferSync>:
 1a8:	ef 92       	push	r14
 1aa:	ff 92       	push	r15
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	44 23       	and	r20, r20
 1b6:	a1 f0       	breq	.+40     	; 0x1e0 <nrf24_transferSync+0x38>
 1b8:	ec 01       	movw	r28, r24
 1ba:	06 2f       	mov	r16, r22
 1bc:	17 2f       	mov	r17, r23
 1be:	41 50       	subi	r20, 0x01	; 1
 1c0:	e4 2e       	mov	r14, r20
 1c2:	f1 2c       	mov	r15, r1
 1c4:	2f ef       	ldi	r18, 0xFF	; 255
 1c6:	e2 1a       	sub	r14, r18
 1c8:	f2 0a       	sbc	r15, r18
 1ca:	e8 0e       	add	r14, r24
 1cc:	f9 1e       	adc	r15, r25
 1ce:	89 91       	ld	r24, Y+
 1d0:	0e 94 95 00 	call	0x12a	; 0x12a <spi_transfer>
 1d4:	f8 01       	movw	r30, r16
 1d6:	81 93       	st	Z+, r24
 1d8:	8f 01       	movw	r16, r30
 1da:	ce 15       	cp	r28, r14
 1dc:	df 05       	cpc	r29, r15
 1de:	b9 f7       	brne	.-18     	; 0x1ce <nrf24_transferSync+0x26>
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	ff 90       	pop	r15
 1ea:	ef 90       	pop	r14
 1ec:	08 95       	ret

000001ee <nrf24_transmitSync>:
 1ee:	0f 93       	push	r16
 1f0:	1f 93       	push	r17
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	66 23       	and	r22, r22
 1f8:	71 f0       	breq	.+28     	; 0x216 <nrf24_transmitSync+0x28>
 1fa:	ec 01       	movw	r28, r24
 1fc:	61 50       	subi	r22, 0x01	; 1
 1fe:	06 2f       	mov	r16, r22
 200:	10 e0       	ldi	r17, 0x00	; 0
 202:	0f 5f       	subi	r16, 0xFF	; 255
 204:	1f 4f       	sbci	r17, 0xFF	; 255
 206:	08 0f       	add	r16, r24
 208:	19 1f       	adc	r17, r25
 20a:	89 91       	ld	r24, Y+
 20c:	0e 94 95 00 	call	0x12a	; 0x12a <spi_transfer>
 210:	c0 17       	cp	r28, r16
 212:	d1 07       	cpc	r29, r17
 214:	d1 f7       	brne	.-12     	; 0x20a <nrf24_transmitSync+0x1c>
 216:	df 91       	pop	r29
 218:	cf 91       	pop	r28
 21a:	1f 91       	pop	r17
 21c:	0f 91       	pop	r16
 21e:	08 95       	ret

00000220 <nrf24_configRegister>:
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	c8 2f       	mov	r28, r24
 226:	d6 2f       	mov	r29, r22
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 03 02 	call	0x406	; 0x406 <nrf24_csn_digitalWrite>
 22e:	8c 2f       	mov	r24, r28
 230:	8f 71       	andi	r24, 0x1F	; 31
 232:	80 62       	ori	r24, 0x20	; 32
 234:	0e 94 95 00 	call	0x12a	; 0x12a <spi_transfer>
 238:	8d 2f       	mov	r24, r29
 23a:	0e 94 95 00 	call	0x12a	; 0x12a <spi_transfer>
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	0e 94 03 02 	call	0x406	; 0x406 <nrf24_csn_digitalWrite>
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	08 95       	ret

0000024a <nrf24_getData>:
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	ec 01       	movw	r28, r24
 250:	80 e0       	ldi	r24, 0x00	; 0
 252:	0e 94 03 02 	call	0x406	; 0x406 <nrf24_csn_digitalWrite>
 256:	81 e6       	ldi	r24, 0x61	; 97
 258:	0e 94 95 00 	call	0x12a	; 0x12a <spi_transfer>
 25c:	40 91 0d 02 	lds	r20, 0x020D	; 0x80020d <payload_len>
 260:	be 01       	movw	r22, r28
 262:	ce 01       	movw	r24, r28
 264:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <nrf24_transferSync>
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	0e 94 03 02 	call	0x406	; 0x406 <nrf24_csn_digitalWrite>
 26e:	60 e4       	ldi	r22, 0x40	; 64
 270:	87 e0       	ldi	r24, 0x07	; 7
 272:	0e 94 10 01 	call	0x220	; 0x220 <nrf24_configRegister>
 276:	df 91       	pop	r29
 278:	cf 91       	pop	r28
 27a:	08 95       	ret

0000027c <nrf24_powerUpRx>:
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 03 02 	call	0x406	; 0x406 <nrf24_csn_digitalWrite>
 282:	82 ee       	ldi	r24, 0xE2	; 226
 284:	0e 94 95 00 	call	0x12a	; 0x12a <spi_transfer>
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	0e 94 03 02 	call	0x406	; 0x406 <nrf24_csn_digitalWrite>
 28e:	60 e7       	ldi	r22, 0x70	; 112
 290:	87 e0       	ldi	r24, 0x07	; 7
 292:	0e 94 10 01 	call	0x220	; 0x220 <nrf24_configRegister>
 296:	80 e0       	ldi	r24, 0x00	; 0
 298:	0e 94 fd 01 	call	0x3fa	; 0x3fa <nrf24_ce_digitalWrite>
 29c:	6b e0       	ldi	r22, 0x0B	; 11
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	0e 94 10 01 	call	0x220	; 0x220 <nrf24_configRegister>
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 fd 01 	call	0x3fa	; 0x3fa <nrf24_ce_digitalWrite>
 2aa:	08 95       	ret

000002ac <nrf24_config>:
 2ac:	60 93 0d 02 	sts	0x020D, r22	; 0x80020d <payload_len>
 2b0:	68 2f       	mov	r22, r24
 2b2:	85 e0       	ldi	r24, 0x05	; 5
 2b4:	0e 94 10 01 	call	0x220	; 0x220 <nrf24_configRegister>
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	81 e1       	ldi	r24, 0x11	; 17
 2bc:	0e 94 10 01 	call	0x220	; 0x220 <nrf24_configRegister>
 2c0:	60 91 0d 02 	lds	r22, 0x020D	; 0x80020d <payload_len>
 2c4:	82 e1       	ldi	r24, 0x12	; 18
 2c6:	0e 94 10 01 	call	0x220	; 0x220 <nrf24_configRegister>
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	83 e1       	ldi	r24, 0x13	; 19
 2ce:	0e 94 10 01 	call	0x220	; 0x220 <nrf24_configRegister>
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	84 e1       	ldi	r24, 0x14	; 20
 2d6:	0e 94 10 01 	call	0x220	; 0x220 <nrf24_configRegister>
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	85 e1       	ldi	r24, 0x15	; 21
 2de:	0e 94 10 01 	call	0x220	; 0x220 <nrf24_configRegister>
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	86 e1       	ldi	r24, 0x16	; 22
 2e6:	0e 94 10 01 	call	0x220	; 0x220 <nrf24_configRegister>
 2ea:	66 e0       	ldi	r22, 0x06	; 6
 2ec:	86 e0       	ldi	r24, 0x06	; 6
 2ee:	0e 94 10 01 	call	0x220	; 0x220 <nrf24_configRegister>
 2f2:	68 e0       	ldi	r22, 0x08	; 8
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	0e 94 10 01 	call	0x220	; 0x220 <nrf24_configRegister>
 2fa:	63 e0       	ldi	r22, 0x03	; 3
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	0e 94 10 01 	call	0x220	; 0x220 <nrf24_configRegister>
 302:	63 e0       	ldi	r22, 0x03	; 3
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	0e 94 10 01 	call	0x220	; 0x220 <nrf24_configRegister>
 30a:	6f e4       	ldi	r22, 0x4F	; 79
 30c:	84 e0       	ldi	r24, 0x04	; 4
 30e:	0e 94 10 01 	call	0x220	; 0x220 <nrf24_configRegister>
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	8c e1       	ldi	r24, 0x1C	; 28
 316:	0e 94 10 01 	call	0x220	; 0x220 <nrf24_configRegister>
 31a:	0e 94 3e 01 	call	0x27c	; 0x27c <nrf24_powerUpRx>
 31e:	08 95       	ret

00000320 <nrf24_readRegister>:
 320:	0f 93       	push	r16
 322:	1f 93       	push	r17
 324:	cf 93       	push	r28
 326:	df 93       	push	r29
 328:	08 2f       	mov	r16, r24
 32a:	eb 01       	movw	r28, r22
 32c:	14 2f       	mov	r17, r20
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	0e 94 03 02 	call	0x406	; 0x406 <nrf24_csn_digitalWrite>
 334:	80 2f       	mov	r24, r16
 336:	8f 71       	andi	r24, 0x1F	; 31
 338:	0e 94 95 00 	call	0x12a	; 0x12a <spi_transfer>
 33c:	41 2f       	mov	r20, r17
 33e:	be 01       	movw	r22, r28
 340:	ce 01       	movw	r24, r28
 342:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <nrf24_transferSync>
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 03 02 	call	0x406	; 0x406 <nrf24_csn_digitalWrite>
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	1f 91       	pop	r17
 352:	0f 91       	pop	r16
 354:	08 95       	ret

00000356 <nrf24_rxFifoEmpty>:
 356:	cf 93       	push	r28
 358:	df 93       	push	r29
 35a:	1f 92       	push	r1
 35c:	cd b7       	in	r28, 0x3d	; 61
 35e:	de b7       	in	r29, 0x3e	; 62
 360:	41 e0       	ldi	r20, 0x01	; 1
 362:	be 01       	movw	r22, r28
 364:	6f 5f       	subi	r22, 0xFF	; 255
 366:	7f 4f       	sbci	r23, 0xFF	; 255
 368:	87 e1       	ldi	r24, 0x17	; 23
 36a:	0e 94 90 01 	call	0x320	; 0x320 <nrf24_readRegister>
 36e:	89 81       	ldd	r24, Y+1	; 0x01
 370:	81 70       	andi	r24, 0x01	; 1
 372:	0f 90       	pop	r0
 374:	df 91       	pop	r29
 376:	cf 91       	pop	r28
 378:	08 95       	ret

0000037a <nrf24_dataReady>:
 37a:	0e 94 c6 00 	call	0x18c	; 0x18c <nrf24_getStatus>
 37e:	86 fd       	sbrc	r24, 6
 380:	07 c0       	rjmp	.+14     	; 0x390 <nrf24_dataReady+0x16>
 382:	0e 94 ab 01 	call	0x356	; 0x356 <nrf24_rxFifoEmpty>
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	88 23       	and	r24, r24
 38a:	19 f0       	breq	.+6      	; 0x392 <nrf24_dataReady+0x18>
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	01 c0       	rjmp	.+2      	; 0x392 <nrf24_dataReady+0x18>
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	89 2f       	mov	r24, r25
 394:	08 95       	ret

00000396 <nrf24_writeRegister>:
    nrf24_csn_digitalWrite(HIGH);
}

/* Write to a single register of nrf24 */
void nrf24_writeRegister(uint8_t reg, uint8_t* value, uint8_t len) 
{
 396:	0f 93       	push	r16
 398:	1f 93       	push	r17
 39a:	cf 93       	push	r28
 39c:	df 93       	push	r29
 39e:	c8 2f       	mov	r28, r24
 3a0:	8b 01       	movw	r16, r22
 3a2:	d4 2f       	mov	r29, r20
    nrf24_csn_digitalWrite(LOW);
 3a4:	80 e0       	ldi	r24, 0x00	; 0
 3a6:	0e 94 03 02 	call	0x406	; 0x406 <nrf24_csn_digitalWrite>
    spi_transfer(W_REGISTER | (REGISTER_MASK & reg));
 3aa:	8c 2f       	mov	r24, r28
 3ac:	8f 71       	andi	r24, 0x1F	; 31
 3ae:	80 62       	ori	r24, 0x20	; 32
 3b0:	0e 94 95 00 	call	0x12a	; 0x12a <spi_transfer>
    nrf24_transmitSync(value,len);
 3b4:	6d 2f       	mov	r22, r29
 3b6:	c8 01       	movw	r24, r16
 3b8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <nrf24_transmitSync>
    nrf24_csn_digitalWrite(HIGH);
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 03 02 	call	0x406	; 0x406 <nrf24_csn_digitalWrite>
}
 3c2:	df 91       	pop	r29
 3c4:	cf 91       	pop	r28
 3c6:	1f 91       	pop	r17
 3c8:	0f 91       	pop	r16
 3ca:	08 95       	ret

000003cc <nrf24_rx_address>:
    nrf24_powerUpRx();
}

/* Set the RX address */
void nrf24_rx_address(uint8_t * adr) 
{
 3cc:	cf 93       	push	r28
 3ce:	df 93       	push	r29
 3d0:	ec 01       	movw	r28, r24
    nrf24_ce_digitalWrite(LOW);
 3d2:	80 e0       	ldi	r24, 0x00	; 0
 3d4:	0e 94 fd 01 	call	0x3fa	; 0x3fa <nrf24_ce_digitalWrite>
    nrf24_writeRegister(RX_ADDR_P1,adr,nrf24_ADDR_LEN);
 3d8:	45 e0       	ldi	r20, 0x05	; 5
 3da:	be 01       	movw	r22, r28
 3dc:	8b e0       	ldi	r24, 0x0B	; 11
 3de:	0e 94 cb 01 	call	0x396	; 0x396 <nrf24_writeRegister>
    nrf24_ce_digitalWrite(HIGH);
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	0e 94 fd 01 	call	0x3fa	; 0x3fa <nrf24_ce_digitalWrite>
}
 3e8:	df 91       	pop	r29
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <nrf24_setupPins>:

#define MISO_PIN	PINB

/* ------------------------------------------------------------------------- */
void nrf24_setupPins(){
    set_bit(CE_DDR, CE_BIT); // CE output
 3ee:	3d 9a       	sbi	0x07, 5	; 7
    set_bit(CSN_DDR, CSN_BIT); // CSN output
 3f0:	3c 9a       	sbi	0x07, 4	; 7
    set_bit(SCK_DDR, SCK_BIT); // SCK output
 3f2:	25 9a       	sbi	0x04, 5	; 4
    set_bit(MOSI_DDR, MOSI_BIT); // MOSI output
 3f4:	23 9a       	sbi	0x04, 3	; 4
    clr_bit(MISO_DDR, MISO_BIT); // MISO input
 3f6:	24 98       	cbi	0x04, 4	; 4
 3f8:	08 95       	ret

000003fa <nrf24_ce_digitalWrite>:
}
/* ------------------------------------------------------------------------- */
void nrf24_ce_digitalWrite(uint8_t state){
    if(state){
 3fa:	88 23       	and	r24, r24
 3fc:	11 f0       	breq	.+4      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
        set_bit(CE_PORT, CE_BIT);
 3fe:	45 9a       	sbi	0x08, 5	; 8
 400:	08 95       	ret
    }
    else{
        clr_bit(CE_PORT, CE_BIT);
 402:	45 98       	cbi	0x08, 5	; 8
 404:	08 95       	ret

00000406 <nrf24_csn_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_csn_digitalWrite(uint8_t state){
    if(state){
 406:	88 23       	and	r24, r24
 408:	11 f0       	breq	.+4      	; 0x40e <nrf24_csn_digitalWrite+0x8>
        set_bit(CSN_PORT, CSN_BIT);
 40a:	44 9a       	sbi	0x08, 4	; 8
 40c:	08 95       	ret
    }
    else{
        clr_bit(CSN_PORT, CSN_BIT);
 40e:	44 98       	cbi	0x08, 4	; 8
 410:	08 95       	ret

00000412 <nrf24_sck_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_sck_digitalWrite(uint8_t state){
    if(state){
 412:	88 23       	and	r24, r24
 414:	11 f0       	breq	.+4      	; 0x41a <nrf24_sck_digitalWrite+0x8>
        set_bit(SCK_PORT, SCK_BIT);
 416:	2d 9a       	sbi	0x05, 5	; 5
 418:	08 95       	ret
    }
    else{
        clr_bit(SCK_PORT, SCK_BIT);
 41a:	2d 98       	cbi	0x05, 5	; 5
 41c:	08 95       	ret

0000041e <nrf24_mosi_digitalWrite>:
    }
}
/* ------------------------------------------------------------------------- */
void nrf24_mosi_digitalWrite(uint8_t state){
    if(state){
 41e:	88 23       	and	r24, r24
 420:	11 f0       	breq	.+4      	; 0x426 <nrf24_mosi_digitalWrite+0x8>
        set_bit(MOSI_PORT, MOSI_BIT);
 422:	2b 9a       	sbi	0x05, 3	; 5
 424:	08 95       	ret
    }
    else{
        clr_bit(MOSI_PORT, MOSI_BIT);
 426:	2b 98       	cbi	0x05, 3	; 5
 428:	08 95       	ret

0000042a <nrf24_miso_digitalRead>:
    }
}
/* ------------------------------------------------------------------------- */
uint8_t nrf24_miso_digitalRead(){
    return check_bit(MISO_PIN, MISO_BIT);
 42a:	83 b1       	in	r24, 0x03	; 3
}
 42c:	80 71       	andi	r24, 0x10	; 16
 42e:	08 95       	ret

00000430 <__vector_18>:
	/* get data from receive buffer */
	data = UART_RxBuf[tmptail];

	return (UART_LastRxError << 8) + data;

} /* uart0_peek */
 430:	1f 92       	push	r1
 432:	0f 92       	push	r0
 434:	0f b6       	in	r0, 0x3f	; 63
 436:	0f 92       	push	r0
 438:	11 24       	eor	r1, r1
 43a:	2f 93       	push	r18
 43c:	3f 93       	push	r19
 43e:	4f 93       	push	r20
 440:	5f 93       	push	r21
 442:	8f 93       	push	r24
 444:	9f 93       	push	r25
 446:	ef 93       	push	r30
 448:	ff 93       	push	r31
 44a:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 44e:	30 91 c6 00 	lds	r19, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 452:	28 71       	andi	r18, 0x18	; 24
 454:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <UART_RxHead>
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	01 96       	adiw	r24, 0x01	; 1
 45c:	8f 77       	andi	r24, 0x7F	; 127
 45e:	99 27       	eor	r25, r25
 460:	40 91 09 01 	lds	r20, 0x0109	; 0x800109 <UART_RxTail>
 464:	50 e0       	ldi	r21, 0x00	; 0
 466:	84 17       	cp	r24, r20
 468:	95 07       	cpc	r25, r21
 46a:	39 f0       	breq	.+14     	; 0x47a <__vector_18+0x4a>
 46c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <UART_RxHead>
 470:	fc 01       	movw	r30, r24
 472:	e3 5f       	subi	r30, 0xF3	; 243
 474:	fe 4f       	sbci	r31, 0xFE	; 254
 476:	30 83       	st	Z, r19
 478:	01 c0       	rjmp	.+2      	; 0x47c <__vector_18+0x4c>
 47a:	22 e0       	ldi	r18, 0x02	; 2
 47c:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <__data_end>
 480:	ff 91       	pop	r31
 482:	ef 91       	pop	r30
 484:	9f 91       	pop	r25
 486:	8f 91       	pop	r24
 488:	5f 91       	pop	r21
 48a:	4f 91       	pop	r20
 48c:	3f 91       	pop	r19
 48e:	2f 91       	pop	r18
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <__vector_19>:
 49a:	1f 92       	push	r1
 49c:	0f 92       	push	r0
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	0f 92       	push	r0
 4a2:	11 24       	eor	r1, r1
 4a4:	8f 93       	push	r24
 4a6:	9f 93       	push	r25
 4a8:	ef 93       	push	r30
 4aa:	ff 93       	push	r31
 4ac:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <UART_TxHead>
 4b0:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <UART_TxTail>
 4b4:	98 17       	cp	r25, r24
 4b6:	79 f0       	breq	.+30     	; 0x4d6 <__vector_19+0x3c>
 4b8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <UART_TxTail>
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	01 96       	adiw	r24, 0x01	; 1
 4c0:	8f 77       	andi	r24, 0x7F	; 127
 4c2:	99 27       	eor	r25, r25
 4c4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <UART_TxTail>
 4c8:	fc 01       	movw	r30, r24
 4ca:	e3 57       	subi	r30, 0x73	; 115
 4cc:	fe 4f       	sbci	r31, 0xFE	; 254
 4ce:	80 81       	ld	r24, Z
 4d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 4d4:	05 c0       	rjmp	.+10     	; 0x4e0 <__vector_19+0x46>
 4d6:	e1 ec       	ldi	r30, 0xC1	; 193
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	80 81       	ld	r24, Z
 4dc:	8f 7d       	andi	r24, 0xDF	; 223
 4de:	80 83       	st	Z, r24
 4e0:	ff 91       	pop	r31
 4e2:	ef 91       	pop	r30
 4e4:	9f 91       	pop	r25
 4e6:	8f 91       	pop	r24
 4e8:	0f 90       	pop	r0
 4ea:	0f be       	out	0x3f, r0	; 63
 4ec:	0f 90       	pop	r0
 4ee:	1f 90       	pop	r1
 4f0:	18 95       	reti

000004f2 <uart0_init>:
 4f2:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <UART_TxHead>
 4f6:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <UART_TxTail>
 4fa:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <UART_RxHead>
 4fe:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <UART_RxTail>
 502:	99 23       	and	r25, r25
 504:	24 f4       	brge	.+8      	; 0x50e <uart0_init+0x1c>
 506:	22 e0       	ldi	r18, 0x02	; 2
 508:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 50c:	9f 77       	andi	r25, 0x7F	; 127
 50e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 512:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 516:	88 e9       	ldi	r24, 0x98	; 152
 518:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 51c:	86 e0       	ldi	r24, 0x06	; 6
 51e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 522:	08 95       	ret

00000524 <uart0_putc>:
**************************************************************************/
void uart0_putc(uint8_t data)
{
	uint16_t tmphead;

	tmphead  = (UART_TxHead + 1) & UART_TX0_BUFFER_MASK;
 524:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <UART_TxHead>
 528:	50 e0       	ldi	r21, 0x00	; 0
 52a:	4f 5f       	subi	r20, 0xFF	; 255
 52c:	5f 4f       	sbci	r21, 0xFF	; 255
 52e:	4f 77       	andi	r20, 0x7F	; 127
 530:	55 27       	eor	r21, r21

	while ( tmphead == UART_TxTail ) {
 532:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <UART_TxTail>
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	42 17       	cp	r20, r18
 53a:	53 07       	cpc	r21, r19
 53c:	d1 f3       	breq	.-12     	; 0x532 <uart0_putc+0xe>
		;/* wait for free space in buffer */
	}

	UART_TxBuf[tmphead] = data;
 53e:	fa 01       	movw	r30, r20
 540:	e3 57       	subi	r30, 0x73	; 115
 542:	fe 4f       	sbci	r31, 0xFE	; 254
 544:	80 83       	st	Z, r24
	UART_TxHead = tmphead;
 546:	40 93 0c 01 	sts	0x010C, r20	; 0x80010c <UART_TxHead>

	/* enable UDRE interrupt */
	UART0_CONTROL    |= _BV(UART0_UDRIE);
 54a:	e1 ec       	ldi	r30, 0xC1	; 193
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 81       	ld	r24, Z
 550:	80 62       	ori	r24, 0x20	; 32
 552:	80 83       	st	Z, r24
 554:	08 95       	ret

00000556 <uart0_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	ec 01       	movw	r28, r24
	while (*s) {
 55c:	88 81       	ld	r24, Y
 55e:	88 23       	and	r24, r24
 560:	31 f0       	breq	.+12     	; 0x56e <uart0_puts+0x18>
 562:	21 96       	adiw	r28, 0x01	; 1
		uart0_putc(*s++);
 564:	0e 94 92 02 	call	0x524	; 0x524 <uart0_putc>
Input:    string to be transmitted
Returns:  none
**************************************************************************/
void uart0_puts(const char *s )
{
	while (*s) {
 568:	89 91       	ld	r24, Y+
 56a:	81 11       	cpse	r24, r1
 56c:	fb cf       	rjmp	.-10     	; 0x564 <uart0_puts+0xe>
		uart0_putc(*s++);
	}

} /* uart0_puts */
 56e:	df 91       	pop	r29
 570:	cf 91       	pop	r28
 572:	08 95       	ret

00000574 <_exit>:
 574:	f8 94       	cli

00000576 <__stop_program>:
 576:	ff cf       	rjmp	.-2      	; 0x576 <__stop_program>
